__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.FacebookLogin = undefined;

    var _this = this;

    var _types = require(_dependencyMap[0], "../types");

    var types = _interopRequireWildcard(_types);

    var _expo = require(_dependencyMap[1], "expo");

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }

            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }

            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }

            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    var FacebookLogin = exports.FacebookLogin = function FacebookLogin() {
        return function (dispatch) {
            return __awaiter(_this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                var _ref, type, token, user;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _expo.Facebook.logInWithReadPermissionsAsync('id', {
                                    behavior: _expo.Constants.appOwnership === 'standalone' ? 'native' : 'web'
                                });

                            case 2:
                                _ref = _context.sent;
                                type = _ref.type;
                                token = _ref.token;

                                if (!(type === 'success' && token)) {
                                    _context.next = 9;
                                    break;
                                }

                                user = new types.User(token, 'test', null, 'Facebook');
                                dispatch({
                                    type: types.LoginConstants.LOGIN_SUCCESS,
                                    payload: user
                                });
                                return _context.abrupt("return");

                            case 9:
                                dispatch({
                                    type: types.LoginConstants.LOGIN_FAILED
                                });

                            case 10:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        };
    };
});