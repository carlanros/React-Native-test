{"version":3,"sources":["_baseIsTypedArray.js"],"names":["baseGetTag","require","isLength","isObjectLike","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","value","length","module","exports"],"mappings":"AAAA,GAAIA,YAAaC,QAAQ,eAAR,CAAjB,CACIC,SAAWD,QAAQ,YAAR,CADf,CAEIE,aAAeF,QAAQ,gBAAR,CAFnB,CAKA,GAAIG,SAAU,oBAAd,CACIC,SAAW,gBADf,CAEIC,QAAU,kBAFd,CAGIC,QAAU,eAHd,CAIIC,SAAW,gBAJf,CAKIC,QAAU,mBALd,CAMIC,OAAS,cANb,CAOIC,UAAY,iBAPhB,CAQIC,UAAY,iBARhB,CASIC,UAAY,iBAThB,CAUIC,OAAS,cAVb,CAWIC,UAAY,iBAXhB,CAYIC,WAAa,kBAZjB,CAcA,GAAIC,gBAAiB,sBAArB,CACIC,YAAc,mBADlB,CAEIC,WAAa,uBAFjB,CAGIC,WAAa,uBAHjB,CAIIC,QAAU,oBAJd,CAKIC,SAAW,qBALf,CAMIC,SAAW,qBANf,CAOIC,SAAW,qBAPf,CAQIC,gBAAkB,4BARtB,CASIC,UAAY,sBAThB,CAUIC,UAAY,sBAVhB,CAaA,GAAIC,gBAAiB,EAArB,CACAA,eAAeT,UAAf,EAA6BS,eAAeR,UAAf,EAC7BQ,eAAeP,OAAf,EAA0BO,eAAeN,QAAf,EAC1BM,eAAeL,QAAf,EAA2BK,eAAeJ,QAAf,EAC3BI,eAAeH,eAAf,EAAkCG,eAAeF,SAAf,EAClCE,eAAeD,SAAf,EAA4B,IAJ5B,CAKAC,eAAexB,OAAf,EAA0BwB,eAAevB,QAAf,EAC1BuB,eAAeX,cAAf,EAAiCW,eAAetB,OAAf,EACjCsB,eAAeV,WAAf,EAA8BU,eAAerB,OAAf,EAC9BqB,eAAepB,QAAf,EAA2BoB,eAAenB,OAAf,EAC3BmB,eAAelB,MAAf,EAAyBkB,eAAejB,SAAf,EACzBiB,eAAehB,SAAf,EAA4BgB,eAAef,SAAf,EAC5Be,eAAed,MAAf,EAAyBc,eAAeb,SAAf,EACzBa,eAAeZ,UAAf,EAA6B,KAP7B,CAgBA,QAASa,iBAAT,CAA0BC,KAA1B,CAAiC,CAC/B,MAAO3B,cAAa2B,KAAb,GACL5B,SAAS4B,MAAMC,MAAf,CADK,EACqB,CAAC,CAACH,eAAe5B,WAAW8B,KAAX,CAAf,CAD9B,CAED,CAEDE,OAAOC,OAAP,CAAiBJ,gBAAjB","file":"_baseIsTypedArray.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n"]}