d2d5ca0de846569dccdcaa31967f4cf3
'use strict';var NativeMethodsMixin=require('NativeMethodsMixin');var Platform=require('Platform');var PropTypes=require('prop-types');var React=require('React');var ReactNativeStyleAttributes=require('ReactNativeStyleAttributes');var ReactNativeViewAttributes=require('ReactNativeViewAttributes');var ViewPropTypes=require('ViewPropTypes');var createReactClass=require('create-react-class');var invariant=require('fbjs/lib/invariant');var requireNativeComponent=require('requireNativeComponent');var View=createReactClass({displayName:'View',mixins:[NativeMethodsMixin],propTypes:ViewPropTypes,viewConfig:{uiViewClassName:'RCTView',validAttributes:ReactNativeViewAttributes.RCTView},contextTypes:{isInAParentText:PropTypes.bool},render:function render(){invariant(!(this.context.isInAParentText&&Platform.OS==='android'),'Nesting of <View> within <Text> is not supported on Android.');return React.createElement(RCTView,this.props);}});var RCTView=requireNativeComponent('RCTView',View,{nativeOnly:{nativeBackgroundAndroid:true,nativeForegroundAndroid:true}});if(__DEV__){var UIManager=require('UIManager');var viewConfig=UIManager.viewConfigs&&UIManager.viewConfigs.RCTView||{};for(var prop in viewConfig.nativeProps){var viewAny=View;if(!viewAny.propTypes[prop]&&!ReactNativeStyleAttributes[prop]){throw new Error('View is missing propType for native prop `'+prop+'`');}}}var ViewToExport=RCTView;if(__DEV__){ViewToExport=View;}module.exports=ViewToExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXcuanMiXSwibmFtZXMiOlsiTmF0aXZlTWV0aG9kc01peGluIiwicmVxdWlyZSIsIlBsYXRmb3JtIiwiUHJvcFR5cGVzIiwiUmVhY3QiLCJSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyIsIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMiLCJWaWV3UHJvcFR5cGVzIiwiY3JlYXRlUmVhY3RDbGFzcyIsImludmFyaWFudCIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJWaWV3IiwiZGlzcGxheU5hbWUiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ2aWV3Q29uZmlnIiwidWlWaWV3Q2xhc3NOYW1lIiwidmFsaWRBdHRyaWJ1dGVzIiwiUkNUVmlldyIsImNvbnRleHRUeXBlcyIsImlzSW5BUGFyZW50VGV4dCIsImJvb2wiLCJyZW5kZXIiLCJjb250ZXh0IiwiT1MiLCJwcm9wcyIsIm5hdGl2ZU9ubHkiLCJuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZCIsIm5hdGl2ZUZvcmVncm91bmRBbmRyb2lkIiwiX19ERVZfXyIsIlVJTWFuYWdlciIsInZpZXdDb25maWdzIiwicHJvcCIsIm5hdGl2ZVByb3BzIiwidmlld0FueSIsIkVycm9yIiwiVmlld1RvRXhwb3J0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBV0EsYUFFQSxHQUFNQSxvQkFBcUJDLE9BQXJCLHNCQUFOLENBQ0EsR0FBTUMsVUFBV0QsT0FBWCxZQUFOLENBQ0EsR0FBTUUsV0FBWUYsT0FBWixjQUFOLENBQ0EsR0FBTUcsT0FBUUgsT0FBUixTQUFOLENBQ0EsR0FBTUksNEJBQTZCSixPQUE3Qiw4QkFBTixDQUNBLEdBQU1LLDJCQUE0QkwsT0FBNUIsNkJBQU4sQ0FDQSxHQUFNTSxlQUFnQk4sT0FBaEIsaUJBQU4sQ0FFQSxHQUFNTyxrQkFBbUJQLE9BQW5CLHNCQUFOLENBQ0EsR0FBTVEsV0FBWVIsT0FBWixzQkFBTixDQUNBLEdBQU1TLHdCQUF5QlQsT0FBekIsMEJBQU4sQ0FXQSxHQUFNVSxNQUFPSCxpQkFBaUIsQ0FDNUJJLFlBQWEsTUFEZSxDQU01QkMsT0FBUSxDQUFDYixrQkFBRCxDQU5vQixDQVk1QmMsVUFBV1AsYUFaaUIsQ0FrQjVCUSxXQUFZLENBQ1ZDLGdCQUFpQixTQURQLENBRVZDLGdCQUFpQlgsMEJBQTBCWSxPQUZqQyxDQWxCZ0IsQ0F1QjVCQyxhQUFjLENBQ1pDLGdCQUFpQmpCLFVBQVVrQixJQURmLENBdkJjLENBMkI1QkMsT0FBUSxpQkFBVyxDQUNqQmIsVUFDRSxFQUFFLEtBQUtjLE9BQUwsQ0FBYUgsZUFBYixFQUFnQ2xCLFNBQVNzQixFQUFULEdBQWdCLFNBQWxELENBREYsQ0FFRSw4REFGRixFQVFBLE1BQU8scUJBQUMsT0FBRCxDQUFhLEtBQUtDLEtBQWxCLENBQVAsQ0FDRCxDQXJDMkIsQ0FBakIsQ0FBYixDQXdDQSxHQUFNUCxTQUFVUix1QkFBdUIsU0FBdkIsQ0FBa0NDLElBQWxDLENBQXdDLENBQ3REZSxXQUFZLENBQ1ZDLHdCQUF5QixJQURmLENBRVZDLHdCQUF5QixJQUZmLENBRDBDLENBQXhDLENBQWhCLENBT0EsR0FBSUMsT0FBSixDQUFhLENBQ1gsR0FBTUMsV0FBWTdCLE9BQVosYUFBTixDQUNBLEdBQU1jLFlBQWFlLFVBQVVDLFdBQVYsRUFBeUJELFVBQVVDLFdBQVYsQ0FBc0JiLE9BQS9DLEVBQTBELEVBQTdFLENBQ0EsSUFBSyxHQUFNYyxLQUFYLEdBQW1CakIsWUFBV2tCLFdBQTlCLENBQTJDLENBQ3pDLEdBQU1DLFNBQWV2QixJQUFyQixDQUNBLEdBQUksQ0FBQ3VCLFFBQVFwQixTQUFSLENBQWtCa0IsSUFBbEIsQ0FBRCxFQUE0QixDQUFDM0IsMkJBQTJCMkIsSUFBM0IsQ0FBakMsQ0FBbUUsQ0FDakUsS0FBTSxJQUFJRyxNQUFKLENBQ0osNkNBQStDSCxJQUEvQyxDQUFzRCxHQURsRCxDQUFOLENBR0QsQ0FDRixDQUNGLENBRUQsR0FBSUksY0FBZWxCLE9BQW5CLENBQ0EsR0FBSVcsT0FBSixDQUFhLENBQ1hPLGFBQWV6QixJQUFmLENBQ0QsQ0FHRDBCLE9BQU9DLE9BQVAsQ0FBbUJGLFlBQW5CIiwiZmlsZSI6IlZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFZpZXdcbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTmF0aXZlTWV0aG9kc01peGluID0gcmVxdWlyZSgnTmF0aXZlTWV0aG9kc01peGluJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyA9IHJlcXVpcmUoJ1JlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzJyk7XG5jb25zdCBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzID0gcmVxdWlyZSgnUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcycpO1xuY29uc3QgVmlld1Byb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdQcm9wVHlwZXMnKTtcblxuY29uc3QgY3JlYXRlUmVhY3RDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5jb25zdCByZXF1aXJlTmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgncmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpO1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICdWaWV3UHJvcFR5cGVzJztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBWaWV3UHJvcHM7XG5cbi8qKlxuICogVGhlIG1vc3QgZnVuZGFtZW50YWwgY29tcG9uZW50IGZvciBidWlsZGluZyBhIFVJLlxuICpcbiAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbFxuICovXG5jb25zdCBWaWV3ID0gY3JlYXRlUmVhY3RDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVmlldycsXG4gIC8vIFRPRE86IFdlIHNob3VsZCBwcm9iYWJseSBleHBvc2UgdGhlIG1peGlucywgdmlld0NvbmZpZywgYW5kIHN0YXRpY3MgcHVibGljbHkuIEZvciBleGFtcGxlLFxuICAvLyBvbmUgb2YgdGhlIHByb3BzIGlzIG9mIHR5cGUgQWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGUuIFRoYXQgaXMgZGVmaW5lZCBhcyBhIGNvbnN0W10gYWJvdmUsXG4gIC8vIGJ1dCBpdCBpcyBub3QgcmVuZGVyZWQgYnkgdGhlIGRvY3MsIHNpbmNlIGBzdGF0aWNzYCBiZWxvdyBpcyBub3QgcmVuZGVyZWQuIFNvIGl0cyBQb3NzaWJsZVxuICAvLyB2YWx1ZXMgaGFkIHRvIGJlIGhhcmRjb2RlZC5cbiAgbWl4aW5zOiBbTmF0aXZlTWV0aG9kc01peGluXSxcblxuICAvLyBgcHJvcFR5cGVzYCBzaG91bGQgbm90IGJlIGFjY2Vzc2VkIGRpcmVjdGx5IG9uIFZpZXcgc2luY2UgdGhpcyB3cmFwcGVyIG9ubHlcbiAgLy8gZXhpc3RzIGZvciBERVYgbW9kZS4gSG93ZXZlciBpdCdzIGltcG9ydGFudCBmb3IgdGhlbSB0byBiZSBkZWNsYXJlZC5cbiAgLy8gSWYgdGhlIG9iamVjdCBwYXNzZWQgdG8gYGNyZWF0ZUNsYXNzYCBzcGVjaWZpZXMgYHByb3BUeXBlc2AsIEZsb3cgd2lsbFxuICAvLyBjcmVhdGUgYSBzdGF0aWMgdHlwZSBmcm9tIGl0LlxuICBwcm9wVHlwZXM6IFZpZXdQcm9wVHlwZXMsXG5cbiAgLyoqXG4gICAqIGBOYXRpdmVNZXRob2RzTWl4aW5gIHdpbGwgbG9vayBmb3IgdGhpcyB3aGVuIGludm9raW5nIGBzZXROYXRpdmVQcm9wc2AuIFdlXG4gICAqIG1ha2UgYHRoaXNgIGxvb2sgbGlrZSBhbiBhY3R1YWwgbmF0aXZlIGNvbXBvbmVudCBjbGFzcy5cbiAgICovXG4gIHZpZXdDb25maWc6IHtcbiAgICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RWaWV3JyxcbiAgICB2YWxpZEF0dHJpYnV0ZXM6IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuUkNUVmlld1xuICB9LFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIGlzSW5BUGFyZW50VGV4dDogUHJvcFR5cGVzLmJvb2wsXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKHRoaXMuY29udGV4dC5pc0luQVBhcmVudFRleHQgJiYgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyksXG4gICAgICAnTmVzdGluZyBvZiA8Vmlldz4gd2l0aGluIDxUZXh0PiBpcyBub3Qgc3VwcG9ydGVkIG9uIEFuZHJvaWQuJyk7XG5cbiAgICAvLyBXQVJOSU5HOiBUaGlzIG1ldGhvZCB3aWxsIG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24gbW9kZSBhcyBpbiB0aGF0IG1vZGUgd2VcbiAgICAvLyByZXBsYWNlIHdyYXBwZXIgY29tcG9uZW50IFZpZXcgd2l0aCBnZW5lcmF0ZWQgbmF0aXZlIHdyYXBwZXIgUkNUVmlldy4gQXZvaWRcbiAgICAvLyBhZGRpbmcgZnVuY3Rpb25hbGl0eSB0aGlzIGNvbXBvbmVudCB0aGF0IHlvdSdkIHdhbnQgdG8gYmUgYXZhaWxhYmxlIGluIGJvdGhcbiAgICAvLyBkZXYgYW5kIHByb2QgbW9kZXMuXG4gICAgcmV0dXJuIDxSQ1RWaWV3IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgfSxcbn0pO1xuXG5jb25zdCBSQ1RWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUkNUVmlldycsIFZpZXcsIHtcbiAgbmF0aXZlT25seToge1xuICAgIG5hdGl2ZUJhY2tncm91bmRBbmRyb2lkOiB0cnVlLFxuICAgIG5hdGl2ZUZvcmVncm91bmRBbmRyb2lkOiB0cnVlLFxuICB9XG59KTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgVUlNYW5hZ2VyID0gcmVxdWlyZSgnVUlNYW5hZ2VyJyk7XG4gIGNvbnN0IHZpZXdDb25maWcgPSBVSU1hbmFnZXIudmlld0NvbmZpZ3MgJiYgVUlNYW5hZ2VyLnZpZXdDb25maWdzLlJDVFZpZXcgfHwge307XG4gIGZvciAoY29uc3QgcHJvcCBpbiB2aWV3Q29uZmlnLm5hdGl2ZVByb3BzKSB7XG4gICAgY29uc3Qgdmlld0FueTogYW55ID0gVmlldzsgLy8gQXBwZWFzZSBmbG93XG4gICAgaWYgKCF2aWV3QW55LnByb3BUeXBlc1twcm9wXSAmJiAhUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXNbcHJvcF0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1ZpZXcgaXMgbWlzc2luZyBwcm9wVHlwZSBmb3IgbmF0aXZlIHByb3AgYCcgKyBwcm9wICsgJ2AnXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgVmlld1RvRXhwb3J0ID0gUkNUVmlldztcbmlmIChfX0RFVl9fKSB7XG4gIFZpZXdUb0V4cG9ydCA9IFZpZXc7XG59XG5cbi8vIE5vIG9uZSBzaG91bGQgZGVwZW5kIG9uIHRoZSBERVYtbW9kZSBjcmVhdGVDbGFzcyBWaWV3IHdyYXBwZXIuXG5tb2R1bGUuZXhwb3J0cyA9ICgoVmlld1RvRXhwb3J0IDogYW55KSA6IHR5cGVvZiBSQ1RWaWV3KTtcbiJdfQ==