{"version":3,"sources":["View.js"],"names":["NativeMethodsMixin","require","Platform","PropTypes","React","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","createReactClass","invariant","requireNativeComponent","View","displayName","mixins","propTypes","viewConfig","uiViewClassName","validAttributes","RCTView","contextTypes","isInAParentText","bool","render","context","OS","props","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","__DEV__","UIManager","viewConfigs","prop","nativeProps","viewAny","Error","ViewToExport","module","exports"],"mappings":"AAWA,aAEA,GAAMA,oBAAqBC,OAArB,sBAAN,CACA,GAAMC,UAAWD,OAAX,YAAN,CACA,GAAME,WAAYF,OAAZ,cAAN,CACA,GAAMG,OAAQH,OAAR,SAAN,CACA,GAAMI,4BAA6BJ,OAA7B,8BAAN,CACA,GAAMK,2BAA4BL,OAA5B,6BAAN,CACA,GAAMM,eAAgBN,OAAhB,iBAAN,CAEA,GAAMO,kBAAmBP,OAAnB,sBAAN,CACA,GAAMQ,WAAYR,OAAZ,sBAAN,CACA,GAAMS,wBAAyBT,OAAzB,0BAAN,CAWA,GAAMU,MAAOH,iBAAiB,CAC5BI,YAAa,MADe,CAM5BC,OAAQ,CAACb,kBAAD,CANoB,CAY5Bc,UAAWP,aAZiB,CAkB5BQ,WAAY,CACVC,gBAAiB,SADP,CAEVC,gBAAiBX,0BAA0BY,OAFjC,CAlBgB,CAuB5BC,aAAc,CACZC,gBAAiBjB,UAAUkB,IADf,CAvBc,CA2B5BC,OAAQ,iBAAW,CACjBb,UACE,EAAE,KAAKc,OAAL,CAAaH,eAAb,EAAgClB,SAASsB,EAAT,GAAgB,SAAlD,CADF,CAEE,8DAFF,EAQA,MAAO,qBAAC,OAAD,CAAa,KAAKC,KAAlB,CAAP,CACD,CArC2B,CAAjB,CAAb,CAwCA,GAAMP,SAAUR,uBAAuB,SAAvB,CAAkCC,IAAlC,CAAwC,CACtDe,WAAY,CACVC,wBAAyB,IADf,CAEVC,wBAAyB,IAFf,CAD0C,CAAxC,CAAhB,CAOA,GAAIC,OAAJ,CAAa,CACX,GAAMC,WAAY7B,OAAZ,aAAN,CACA,GAAMc,YAAae,UAAUC,WAAV,EAAyBD,UAAUC,WAAV,CAAsBb,OAA/C,EAA0D,EAA7E,CACA,IAAK,GAAMc,KAAX,GAAmBjB,YAAWkB,WAA9B,CAA2C,CACzC,GAAMC,SAAevB,IAArB,CACA,GAAI,CAACuB,QAAQpB,SAAR,CAAkBkB,IAAlB,CAAD,EAA4B,CAAC3B,2BAA2B2B,IAA3B,CAAjC,CAAmE,CACjE,KAAM,IAAIG,MAAJ,CACJ,6CAA+CH,IAA/C,CAAsD,GADlD,CAAN,CAGD,CACF,CACF,CAED,GAAII,cAAelB,OAAnB,CACA,GAAIW,OAAJ,CAAa,CACXO,aAAezB,IAAf,CACD,CAGD0B,OAAOC,OAAP,CAAmBF,YAAnB","file":"View.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule View\n * @flow\n */\n'use strict';\n\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ViewProps} from 'ViewPropTypes';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI.\n *\n * See http://facebook.github.io/react-native/docs/view.html\n */\nconst View = createReactClass({\n  displayName: 'View',\n  // TODO: We should probably expose the mixins, viewConfig, and statics publicly. For example,\n  // one of the props is of type AccessibilityComponentType. That is defined as a const[] above,\n  // but it is not rendered by the docs, since `statics` below is not rendered. So its Possible\n  // values had to be hardcoded.\n  mixins: [NativeMethodsMixin],\n\n  // `propTypes` should not be accessed directly on View since this wrapper only\n  // exists for DEV mode. However it's important for them to be declared.\n  // If the object passed to `createClass` specifies `propTypes`, Flow will\n  // create a static type from it.\n  propTypes: ViewPropTypes,\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView\n  },\n\n  contextTypes: {\n    isInAParentText: PropTypes.bool,\n  },\n\n  render: function() {\n    invariant(\n      !(this.context.isInAParentText && Platform.OS === 'android'),\n      'Nesting of <View> within <Text> is not supported on Android.');\n\n    // WARNING: This method will not be used in production mode as in that mode we\n    // replace wrapper component View with generated native wrapper RCTView. Avoid\n    // adding functionality this component that you'd want to be available in both\n    // dev and prod modes.\n    return <RCTView {...this.props} />;\n  },\n});\n\nconst RCTView = requireNativeComponent('RCTView', View, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  }\n});\n\nif (__DEV__) {\n  const UIManager = require('UIManager');\n  const viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};\n  for (const prop in viewConfig.nativeProps) {\n    const viewAny: any = View; // Appease flow\n    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {\n      throw new Error(\n        'View is missing propType for native prop `' + prop + '`'\n      );\n    }\n  }\n}\n\nlet ViewToExport = RCTView;\nif (__DEV__) {\n  ViewToExport = View;\n}\n\n// No one should depend on the DEV-mode createClass View wrapper.\nmodule.exports = ((ViewToExport : any) : typeof RCTView);\n"]}