{"version":3,"sources":["flattenStyle.js"],"names":["invariant","require","ReactNativePropRegistry","getStyle","style","undefined","getByID","flattenStyle","Array","isArray","result","i","styleLength","length","computedStyle","key","module","exports"],"mappings":"AAWA,aAEA,GAAIA,WAAYC,OAAZ,sBAAJ,CACA,GAAIC,wBAAJ,CAIA,QAASC,SAAT,CAAkBC,KAAlB,CAAyB,CACvB,GAAIF,0BAA4BG,SAAhC,CAA2C,CACzCH,wBAA0BD,OAA1B,4BACD,CACD,GAAI,MAAOG,MAAP,GAAiB,QAArB,CAA+B,CAC7B,MAAOF,yBAAwBI,OAAxB,CAAgCF,KAAhC,CAAP,CACD,CACD,MAAOA,MAAP,CACD,CAED,QAASG,aAAT,CAAsBH,KAAtB,CAAiD,CAC/C,GAAI,CAACA,KAAL,CAAY,CACV,MAAOC,UAAP,CACD,CACDL,UAAUI,QAAU,IAApB,CAA0B,iCAA1B,EAEA,GAAI,CAACI,MAAMC,OAAN,CAAcL,KAAd,CAAL,CAA2B,CACzB,MAAOD,UAASC,KAAT,CAAP,CACD,CAED,GAAIM,QAAS,EAAb,CACA,IAAK,GAAIC,GAAI,CAAR,CAAWC,YAAcR,MAAMS,MAApC,CAA4CF,EAAIC,WAAhD,CAA6D,EAAED,CAA/D,CAAkE,CAChE,GAAIG,eAAgBP,aAAaH,MAAMO,CAAN,CAAb,CAApB,CACA,GAAIG,aAAJ,CAAmB,CACjB,IAAK,GAAIC,IAAT,GAAgBD,cAAhB,CAA+B,CAC7BJ,OAAOK,GAAP,EAAcD,cAAcC,GAAd,CAAd,CACD,CACF,CACF,CACD,MAAOL,OAAP,CACD,CAEDM,OAAOC,OAAP,CAAiBV,YAAjB","file":"flattenStyle.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenStyle\n * @flow\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\nvar ReactNativePropRegistry;\n\nimport type { StyleObj } from 'StyleSheetTypes';\n\nfunction getStyle(style) {\n  if (ReactNativePropRegistry === undefined) {\n    ReactNativePropRegistry = require('ReactNativePropRegistry');\n  }\n  if (typeof style === 'number') {\n    return ReactNativePropRegistry.getByID(style);\n  }\n  return style;\n}\n\nfunction flattenStyle(style: ?StyleObj): ?Object {\n  if (!style) {\n    return undefined;\n  }\n  invariant(style !== true, 'style may be false but not true');\n\n  if (!Array.isArray(style)) {\n    return getStyle(style);\n  }\n\n  var result = {};\n  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {\n    var computedStyle = flattenStyle(style[i]);\n    if (computedStyle) {\n      for (var key in computedStyle) {\n        result[key] = computedStyle[key];\n      }\n    }\n  }\n  return result;\n}\n\nmodule.exports = flattenStyle;\n"]}