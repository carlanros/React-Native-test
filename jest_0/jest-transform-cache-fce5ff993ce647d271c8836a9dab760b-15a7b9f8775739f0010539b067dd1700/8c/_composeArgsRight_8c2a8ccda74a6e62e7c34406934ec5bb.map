{"version":3,"sources":["_composeArgsRight.js"],"names":["nativeMax","Math","max","composeArgsRight","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersIndex","holdersLength","rightIndex","rightLength","rangeLength","result","Array","isUncurried","offset","module","exports"],"mappings":"AACA,GAAIA,WAAYC,KAAKC,GAArB,CAaA,QAASC,iBAAT,CAA0BC,IAA1B,CAAgCC,QAAhC,CAA0CC,OAA1C,CAAmDC,SAAnD,CAA8D,CAC5D,GAAIC,WAAY,CAAC,CAAjB,CACIC,WAAaL,KAAKM,MADtB,CAEIC,aAAe,CAAC,CAFpB,CAGIC,cAAgBN,QAAQI,MAH5B,CAIIG,WAAa,CAAC,CAJlB,CAKIC,YAAcT,SAASK,MAL3B,CAMIK,YAAcf,UAAUS,WAAaG,aAAvB,CAAsC,CAAtC,CANlB,CAOII,OAASC,MAAMF,YAAcD,WAApB,CAPb,CAQII,YAAc,CAACX,SARnB,CAUA,MAAO,EAAEC,SAAF,CAAcO,WAArB,CAAkC,CAChCC,OAAOR,SAAP,EAAoBJ,KAAKI,SAAL,CAApB,CACD,CACD,GAAIW,QAASX,SAAb,CACA,MAAO,EAAEK,UAAF,CAAeC,WAAtB,CAAmC,CACjCE,OAAOG,OAASN,UAAhB,EAA8BR,SAASQ,UAAT,CAA9B,CACD,CACD,MAAO,EAAEF,YAAF,CAAiBC,aAAxB,CAAuC,CACrC,GAAIM,aAAeV,UAAYC,UAA/B,CAA2C,CACzCO,OAAOG,OAASb,QAAQK,YAAR,CAAhB,EAAyCP,KAAKI,WAAL,CAAzC,CACD,CACF,CACD,MAAOQ,OAAP,CACD,CAEDI,OAAOC,OAAP,CAAiBlB,gBAAjB","file":"_composeArgsRight.js","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n"]}