{"version":3,"sources":["_toKey.js"],"names":["isSymbol","require","INFINITY","toKey","value","result","module","exports"],"mappings":"AAAA,GAAIA,UAAWC,QAAQ,YAAR,CAAf,CAGA,GAAIC,UAAW,EAAI,CAAnB,CASA,QAASC,MAAT,CAAeC,KAAf,CAAsB,CACpB,GAAI,MAAOA,MAAP,EAAgB,QAAhB,EAA4BJ,SAASI,KAAT,CAAhC,CAAiD,CAC/C,MAAOA,MAAP,CACD,CACD,GAAIC,QAAUD,MAAQ,EAAtB,CACA,MAAQC,SAAU,GAAV,EAAkB,EAAID,KAAL,EAAe,CAACF,QAAlC,CAA8C,IAA9C,CAAqDG,MAA5D,CACD,CAEDC,OAAOC,OAAP,CAAiBJ,KAAjB","file":"_toKey.js","sourcesContent":["var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n"]}