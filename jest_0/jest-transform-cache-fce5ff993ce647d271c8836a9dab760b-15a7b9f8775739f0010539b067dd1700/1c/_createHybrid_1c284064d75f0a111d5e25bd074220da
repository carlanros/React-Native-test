3d202aa62ee07ed767215c84f95442b2
var composeArgs=require('./_composeArgs'),composeArgsRight=require('./_composeArgsRight'),countHolders=require('./_countHolders'),createCtor=require('./_createCtor'),createRecurry=require('./_createRecurry'),getHolder=require('./_getHolder'),reorder=require('./_reorder'),replaceHolders=require('./_replaceHolders'),root=require('./_root');var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_ARY_FLAG=128,WRAP_FLIP_FLAG=512;function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}module.exports=createHybrid;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jcmVhdGVIeWJyaWQuanMiXSwibmFtZXMiOlsiY29tcG9zZUFyZ3MiLCJyZXF1aXJlIiwiY29tcG9zZUFyZ3NSaWdodCIsImNvdW50SG9sZGVycyIsImNyZWF0ZUN0b3IiLCJjcmVhdGVSZWN1cnJ5IiwiZ2V0SG9sZGVyIiwicmVvcmRlciIsInJlcGxhY2VIb2xkZXJzIiwicm9vdCIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIldSQVBfRkxJUF9GTEFHIiwiY3JlYXRlSHlicmlkIiwiZnVuYyIsImJpdG1hc2siLCJ0aGlzQXJnIiwicGFydGlhbHMiLCJob2xkZXJzIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0N1cnJpZWQiLCJpc0ZsaXAiLCJDdG9yIiwidW5kZWZpbmVkIiwid3JhcHBlciIsImxlbmd0aCIsImFyZ3VtZW50cyIsImFyZ3MiLCJBcnJheSIsImluZGV4IiwicGxhY2Vob2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwidGhpc0JpbmRpbmciLCJmbiIsInJldmVyc2UiLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLGFBQWNDLFFBQVEsZ0JBQVIsQ0FBbEIsQ0FDSUMsaUJBQW1CRCxRQUFRLHFCQUFSLENBRHZCLENBRUlFLGFBQWVGLFFBQVEsaUJBQVIsQ0FGbkIsQ0FHSUcsV0FBYUgsUUFBUSxlQUFSLENBSGpCLENBSUlJLGNBQWdCSixRQUFRLGtCQUFSLENBSnBCLENBS0lLLFVBQVlMLFFBQVEsY0FBUixDQUxoQixDQU1JTSxRQUFVTixRQUFRLFlBQVIsQ0FOZCxDQU9JTyxlQUFpQlAsUUFBUSxtQkFBUixDQVByQixDQVFJUSxLQUFPUixRQUFRLFNBQVIsQ0FSWCxDQVdBLEdBQUlTLGdCQUFpQixDQUFyQixDQUNJQyxtQkFBcUIsQ0FEekIsQ0FFSUMsZ0JBQWtCLENBRnRCLENBR0lDLHNCQUF3QixFQUg1QixDQUlJQyxjQUFnQixHQUpwQixDQUtJQyxlQUFpQixHQUxyQixDQTBCQSxRQUFTQyxhQUFULENBQXNCQyxJQUF0QixDQUE0QkMsT0FBNUIsQ0FBcUNDLE9BQXJDLENBQThDQyxRQUE5QyxDQUF3REMsT0FBeEQsQ0FBaUVDLGFBQWpFLENBQWdGQyxZQUFoRixDQUE4RkMsTUFBOUYsQ0FBc0dDLEdBQXRHLENBQTJHQyxLQUEzRyxDQUFrSCxDQUNoSCxHQUFJQyxPQUFRVCxRQUFVSixhQUF0QixDQUNJYyxPQUFTVixRQUFVUixjQUR2QixDQUVJbUIsVUFBWVgsUUFBVVAsa0JBRjFCLENBR0ltQixVQUFZWixTQUFXTixnQkFBa0JDLHFCQUE3QixDQUhoQixDQUlJa0IsT0FBU2IsUUFBVUgsY0FKdkIsQ0FLSWlCLEtBQU9ILFVBQVlJLFNBQVosQ0FBd0I3QixXQUFXYSxJQUFYLENBTG5DLENBT0EsUUFBU2lCLFFBQVQsRUFBbUIsQ0FDakIsR0FBSUMsUUFBU0MsVUFBVUQsTUFBdkIsQ0FDSUUsS0FBT0MsTUFBTUgsTUFBTixDQURYLENBRUlJLE1BQVFKLE1BRlosQ0FJQSxNQUFPSSxPQUFQLENBQWdCLENBQ2RGLEtBQUtFLEtBQUwsRUFBY0gsVUFBVUcsS0FBVixDQUFkLENBQ0QsQ0FDRCxHQUFJVCxTQUFKLENBQWUsQ0FDYixHQUFJVSxhQUFjbEMsVUFBVTRCLE9BQVYsQ0FBbEIsQ0FDSU8sYUFBZXRDLGFBQWFrQyxJQUFiLENBQW1CRyxXQUFuQixDQURuQixDQUVELENBQ0QsR0FBSXBCLFFBQUosQ0FBYyxDQUNaaUIsS0FBT3JDLFlBQVlxQyxJQUFaLENBQWtCakIsUUFBbEIsQ0FBNEJDLE9BQTVCLENBQXFDUyxTQUFyQyxDQUFQLENBQ0QsQ0FDRCxHQUFJUixhQUFKLENBQW1CLENBQ2pCZSxLQUFPbkMsaUJBQWlCbUMsSUFBakIsQ0FBdUJmLGFBQXZCLENBQXNDQyxZQUF0QyxDQUFvRE8sU0FBcEQsQ0FBUCxDQUNELENBQ0RLLFFBQVVNLFlBQVYsQ0FDQSxHQUFJWCxXQUFhSyxPQUFTVCxLQUExQixDQUFpQyxDQUMvQixHQUFJZ0IsWUFBYWxDLGVBQWU2QixJQUFmLENBQXFCRyxXQUFyQixDQUFqQixDQUNBLE1BQU9uQyxlQUNMWSxJQURLLENBQ0NDLE9BREQsQ0FDVUYsWUFEVixDQUN3QmtCLFFBQVFNLFdBRGhDLENBQzZDckIsT0FEN0MsQ0FFTGtCLElBRkssQ0FFQ0ssVUFGRCxDQUVhbEIsTUFGYixDQUVxQkMsR0FGckIsQ0FFMEJDLE1BQVFTLE1BRmxDLENBQVAsQ0FJRCxDQUNELEdBQUlRLGFBQWNmLE9BQVNULE9BQVQsQ0FBbUIsSUFBckMsQ0FDSXlCLEdBQUtmLFVBQVljLFlBQVkxQixJQUFaLENBQVosQ0FBZ0NBLElBRHpDLENBR0FrQixPQUFTRSxLQUFLRixNQUFkLENBQ0EsR0FBSVgsTUFBSixDQUFZLENBQ1ZhLEtBQU85QixRQUFROEIsSUFBUixDQUFjYixNQUFkLENBQVAsQ0FDRCxDQUZELElBRU8sSUFBSU8sUUFBVUksT0FBUyxDQUF2QixDQUEwQixDQUMvQkUsS0FBS1EsT0FBTCxHQUNELENBQ0QsR0FBSWxCLE9BQVNGLElBQU1VLE1BQW5CLENBQTJCLENBQ3pCRSxLQUFLRixNQUFMLENBQWNWLEdBQWQsQ0FDRCxDQUNELEdBQUksTUFBUSxPQUFTaEIsSUFBakIsRUFBeUIsZUFBZ0J5QixRQUE3QyxDQUFzRCxDQUNwRFUsR0FBS1osTUFBUTVCLFdBQVd3QyxFQUFYLENBQWIsQ0FDRCxDQUNELE1BQU9BLElBQUdFLEtBQUgsQ0FBU0gsV0FBVCxDQUFzQk4sSUFBdEIsQ0FBUCxDQUNELENBQ0QsTUFBT0gsUUFBUCxDQUNELENBRURhLE9BQU9DLE9BQVAsQ0FBaUJoQyxZQUFqQiIsImZpbGUiOiJfY3JlYXRlSHlicmlkLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbXBvc2VBcmdzID0gcmVxdWlyZSgnLi9fY29tcG9zZUFyZ3MnKSxcbiAgICBjb21wb3NlQXJnc1JpZ2h0ID0gcmVxdWlyZSgnLi9fY29tcG9zZUFyZ3NSaWdodCcpLFxuICAgIGNvdW50SG9sZGVycyA9IHJlcXVpcmUoJy4vX2NvdW50SG9sZGVycycpLFxuICAgIGNyZWF0ZUN0b3IgPSByZXF1aXJlKCcuL19jcmVhdGVDdG9yJyksXG4gICAgY3JlYXRlUmVjdXJyeSA9IHJlcXVpcmUoJy4vX2NyZWF0ZVJlY3VycnknKSxcbiAgICBnZXRIb2xkZXIgPSByZXF1aXJlKCcuL19nZXRIb2xkZXInKSxcbiAgICByZW9yZGVyID0gcmVxdWlyZSgnLi9fcmVvcmRlcicpLFxuICAgIHJlcGxhY2VIb2xkZXJzID0gcmVxdWlyZSgnLi9fcmVwbGFjZUhvbGRlcnMnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgfVxuICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICB9XG4gICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICB9XG4gICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgaWYgKGFyZ1Bvcykge1xuICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICB9XG4gICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgfVxuICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVIeWJyaWQ7XG4iXX0=