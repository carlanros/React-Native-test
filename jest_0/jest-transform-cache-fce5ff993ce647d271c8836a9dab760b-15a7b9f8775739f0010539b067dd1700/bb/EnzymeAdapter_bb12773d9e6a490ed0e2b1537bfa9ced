b05682b46953c9cab9752fb3c3d13ab8
var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function unimplementedError(methodName,classname){return new Error(String(methodName)+' is a required method of '+String(classname)+', but was not implemented.');}var EnzymeAdapter=function(){function EnzymeAdapter(){_classCallCheck(this,EnzymeAdapter);this.options={};}_createClass(EnzymeAdapter,[{key:'createRenderer',value:function(){function createRenderer(options){throw unimplementedError('createRenderer','EnzymeAdapter');}return createRenderer;}()},{key:'nodeToElement',value:function(){function nodeToElement(node){throw unimplementedError('nodeToElement','EnzymeAdapter');}return nodeToElement;}()},{key:'isValidElement',value:function(){function isValidElement(element){throw unimplementedError('isValidElement','EnzymeAdapter');}return isValidElement;}()},{key:'createElement',value:function(){function createElement(type,props){throw unimplementedError('createElement','EnzymeAdapter');}return createElement;}()}]);return EnzymeAdapter;}();EnzymeAdapter.MODES={STRING:'string',MOUNT:'mount',SHALLOW:'shallow'};module.exports=EnzymeAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVuenltZUFkYXB0ZXIuanMiXSwibmFtZXMiOlsiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJ1bmltcGxlbWVudGVkRXJyb3IiLCJtZXRob2ROYW1lIiwiY2xhc3NuYW1lIiwiRXJyb3IiLCJTdHJpbmciLCJFbnp5bWVBZGFwdGVyIiwib3B0aW9ucyIsInZhbHVlIiwiY3JlYXRlUmVuZGVyZXIiLCJub2RlVG9FbGVtZW50Iiwibm9kZSIsImlzVmFsaWRFbGVtZW50IiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiTU9ERVMiLCJTVFJJTkciLCJNT1VOVCIsIlNIQUxMT1ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxjQUFlLFVBQVksQ0FBRSxRQUFTQyxpQkFBVCxDQUEwQkMsTUFBMUIsQ0FBa0NDLEtBQWxDLENBQXlDLENBQUUsSUFBSyxHQUFJQyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUlELE1BQU1FLE1BQTFCLENBQWtDRCxHQUFsQyxDQUF1QyxDQUFFLEdBQUlFLFlBQWFILE1BQU1DLENBQU4sQ0FBakIsQ0FBMkJFLFdBQVdDLFVBQVgsQ0FBd0JELFdBQVdDLFVBQVgsRUFBeUIsS0FBakQsQ0FBd0RELFdBQVdFLFlBQVgsQ0FBMEIsSUFBMUIsQ0FBZ0MsR0FBSSxTQUFXRixXQUFmLENBQTJCQSxXQUFXRyxRQUFYLENBQXNCLElBQXRCLENBQTRCQyxPQUFPQyxjQUFQLENBQXNCVCxNQUF0QixDQUE4QkksV0FBV00sR0FBekMsQ0FBOENOLFVBQTlDLEVBQTRELENBQUUsQ0FBQyxNQUFPLFVBQVVPLFdBQVYsQ0FBdUJDLFVBQXZCLENBQW1DQyxXQUFuQyxDQUFnRCxDQUFFLEdBQUlELFVBQUosQ0FBZ0JiLGlCQUFpQlksWUFBWUcsU0FBN0IsQ0FBd0NGLFVBQXhDLEVBQXFELEdBQUlDLFdBQUosQ0FBaUJkLGlCQUFpQlksV0FBakIsQ0FBOEJFLFdBQTlCLEVBQTRDLE1BQU9GLFlBQVAsQ0FBcUIsQ0FBaE4sQ0FBbU4sQ0FBOWhCLEVBQW5CLENBRUEsUUFBU0ksZ0JBQVQsQ0FBeUJDLFFBQXpCLENBQW1DTCxXQUFuQyxDQUFnRCxDQUFFLEdBQUksRUFBRUssbUJBQW9CTCxZQUF0QixDQUFKLENBQXdDLENBQUUsS0FBTSxJQUFJTSxVQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFLENBRXpKLFFBQVNDLG1CQUFULENBQTRCQyxVQUE1QixDQUF3Q0MsU0FBeEMsQ0FBbUQsQ0FDakQsTUFBTyxJQUFJQyxNQUFKLENBQVVDLE9BQU9ILFVBQVAsRUFBcUIsMkJBQXJCLENBQW1ERyxPQUFPRixTQUFQLENBQW5ELENBQXVFLDRCQUFqRixDQUFQLENBQ0QsQ0FFRCxHQUFJRyxlQUFnQixVQUFZLENBQzlCLFFBQVNBLGNBQVQsRUFBeUIsQ0FDdkJSLGdCQUFnQixJQUFoQixDQUFzQlEsYUFBdEIsRUFFQSxLQUFLQyxPQUFMLENBQWUsRUFBZixDQUNELENBTUQxQixhQUFheUIsYUFBYixDQUE0QixDQUFDLENBQzNCYixJQUFLLGdCQURzQixDQUUzQmUsTUFBTyxVQUFZLENBQ2pCLFFBQVNDLGVBQVQsQ0FBd0JGLE9BQXhCLENBQWlDLENBQy9CLEtBQU1OLG9CQUFtQixnQkFBbkIsQ0FBcUMsZUFBckMsQ0FBTixDQUNELENBRUQsTUFBT1EsZUFBUCxDQUNELENBTk0sRUFGb0IsQ0FBRCxDQWV6QixDQUNEaEIsSUFBSyxlQURKLENBRURlLE1BQU8sVUFBWSxDQUNqQixRQUFTRSxjQUFULENBQXVCQyxJQUF2QixDQUE2QixDQUMzQixLQUFNVixvQkFBbUIsZUFBbkIsQ0FBb0MsZUFBcEMsQ0FBTixDQUNELENBRUQsTUFBT1MsY0FBUCxDQUNELENBTk0sRUFGTixDQWZ5QixDQTJCekIsQ0FDRGpCLElBQUssZ0JBREosQ0FFRGUsTUFBTyxVQUFZLENBQ2pCLFFBQVNJLGVBQVQsQ0FBd0JDLE9BQXhCLENBQWlDLENBQy9CLEtBQU1aLG9CQUFtQixnQkFBbkIsQ0FBcUMsZUFBckMsQ0FBTixDQUNELENBRUQsTUFBT1csZUFBUCxDQUNELENBTk0sRUFGTixDQTNCeUIsQ0F1Q3pCLENBQ0RuQixJQUFLLGVBREosQ0FFRGUsTUFBTyxVQUFZLENBQ2pCLFFBQVNNLGNBQVQsQ0FBdUJDLElBQXZCLENBQTZCL0IsS0FBN0IsQ0FBb0MsQ0FDbEMsS0FBTWlCLG9CQUFtQixlQUFuQixDQUFvQyxlQUFwQyxDQUFOLENBQ0QsQ0FFRCxNQUFPYSxjQUFQLENBQ0QsQ0FOTSxFQUZOLENBdkN5QixDQUE1QixFQWtEQSxNQUFPUixjQUFQLENBQ0QsQ0E5RG1CLEVBQXBCLENBZ0VBQSxjQUFjVSxLQUFkLENBQXNCLENBQ3BCQyxPQUFRLFFBRFksQ0FFcEJDLE1BQU8sT0FGYSxDQUdwQkMsUUFBUyxTQUhXLENBQXRCLENBTUFDLE9BQU9DLE9BQVAsQ0FBaUJmLGFBQWpCIiwiZmlsZSI6IkVuenltZUFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiB1bmltcGxlbWVudGVkRXJyb3IobWV0aG9kTmFtZSwgY2xhc3NuYW1lKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoU3RyaW5nKG1ldGhvZE5hbWUpICsgJyBpcyBhIHJlcXVpcmVkIG1ldGhvZCBvZiAnICsgU3RyaW5nKGNsYXNzbmFtZSkgKyAnLCBidXQgd2FzIG5vdCBpbXBsZW1lbnRlZC4nKTtcbn1cblxudmFyIEVuenltZUFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVuenltZUFkYXB0ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVuenltZUFkYXB0ZXIpO1xuXG4gICAgdGhpcy5vcHRpb25zID0ge307XG4gIH1cbiAgLy8gUHJvdmlkZWQgYSBiYWcgb2Ygb3B0aW9ucywgcmV0dXJuIGFuIGBFbnp5bWVSZW5kZXJlcmAuIFNvbWUgb3B0aW9ucyBjYW4gYmUgaW1wbGVtZW50YXRpb25cbiAgLy8gc3BlY2lmaWMsIGxpa2UgYGF0dGFjaGAgZXRjLiBmb3IgUmVhY3QsIGJ1dCBub3QgcGFydCBvZiB0aGlzIGludGVyZmFjZSBleHBsaWNpdGx5LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgbm8tdW51c2VkLXZhcnNcblxuXG4gIF9jcmVhdGVDbGFzcyhFbnp5bWVBZGFwdGVyLCBbe1xuICAgIGtleTogJ2NyZWF0ZVJlbmRlcmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIob3B0aW9ucykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2NyZWF0ZVJlbmRlcmVyJywgJ0VuenltZUFkYXB0ZXInKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZVJlbmRlcmVyO1xuICAgIH0oKVxuXG4gICAgLy8gY29udmVydHMgYW4gUlNUTm9kZSB0byB0aGUgY29ycmVzcG9uZGluZyBKU1ggUHJhZ21hIEVsZW1lbnQuIFRoaXMgd2lsbCBiZSBuZWVkZWRcbiAgICAvLyBpbiBvcmRlciB0byBpbXBsZW1lbnQgdGhlIGBXcmFwcGVyLm1vdW50KClgIGFuZCBgV3JhcHBlci5zaGFsbG93KClgIG1ldGhvZHMsIGJ1dCBzaG91bGRcbiAgICAvLyBiZSBwcmV0dHkgc3RyYWlnaHRmb3J3YXJkIGZvciBwZW9wbGUgdG8gaW1wbGVtZW50LlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBuby11bnVzZWQtdmFyc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdub2RlVG9FbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbm9kZVRvRWxlbWVudChub2RlKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignbm9kZVRvRWxlbWVudCcsICdFbnp5bWVBZGFwdGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlVG9FbGVtZW50O1xuICAgIH0oKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIG5vLXVudXNlZC12YXJzXG5cbiAgfSwge1xuICAgIGtleTogJ2lzVmFsaWRFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2lzVmFsaWRFbGVtZW50JywgJ0VuenltZUFkYXB0ZXInKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzVmFsaWRFbGVtZW50O1xuICAgIH0oKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIG5vLXVudXNlZC12YXJzXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignY3JlYXRlRWxlbWVudCcsICdFbnp5bWVBZGFwdGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50O1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIEVuenltZUFkYXB0ZXI7XG59KCk7XG5cbkVuenltZUFkYXB0ZXIuTU9ERVMgPSB7XG4gIFNUUklORzogJ3N0cmluZycsXG4gIE1PVU5UOiAnbW91bnQnLFxuICBTSEFMTE9XOiAnc2hhbGxvdydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW56eW1lQWRhcHRlcjsiXX0=