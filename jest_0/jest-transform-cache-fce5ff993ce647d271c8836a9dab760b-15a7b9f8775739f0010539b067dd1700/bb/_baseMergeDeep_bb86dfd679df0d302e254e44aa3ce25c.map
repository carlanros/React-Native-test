{"version":3,"sources":["_baseMergeDeep.js"],"names":["assignMergeValue","require","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set","module","exports"],"mappings":"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","file":"_baseMergeDeep.js","sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"]}