{"version":3,"sources":["_castPath.js"],"names":["isArray","require","isKey","stringToPath","toString","castPath","value","object","module","exports"],"mappings":"AAAA,GAAIA,SAAUC,QAAQ,WAAR,CAAd,CACIC,MAAQD,QAAQ,UAAR,CADZ,CAEIE,aAAeF,QAAQ,iBAAR,CAFnB,CAGIG,SAAWH,QAAQ,YAAR,CAHf,CAaA,QAASI,SAAT,CAAkBC,KAAlB,CAAyBC,MAAzB,CAAiC,CAC/B,GAAIP,QAAQM,KAAR,CAAJ,CAAoB,CAClB,MAAOA,MAAP,CACD,CACD,MAAOJ,OAAMI,KAAN,CAAaC,MAAb,EAAuB,CAACD,KAAD,CAAvB,CAAiCH,aAAaC,SAASE,KAAT,CAAb,CAAxC,CACD,CAEDE,OAAOC,OAAP,CAAiBJ,QAAjB","file":"_castPath.js","sourcesContent":["var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n"]}