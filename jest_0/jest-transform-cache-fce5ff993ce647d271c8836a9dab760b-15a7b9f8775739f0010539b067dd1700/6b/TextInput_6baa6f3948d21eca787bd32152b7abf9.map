{"version":3,"sources":["TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","onlyMultiline","onTextInput","children","OS","AndroidTextInput","RCTTextView","RCTTextField","DataDetectorTypes","TextInput","displayName","statics","State","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","autoGrow","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","maxHeight","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","getDefaultProps","mixins","getInitialState","layoutHeight","_layoutHeight","isFocused","currentlyFocusedField","findNodeHandle","_inputRef","contextTypes","onFocusRequested","focusEmitter","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","context","requestAnimationFrame","focus","addListener","el","blur","componentWillUnmount","remove","getChildContext","isInAParentText","childContextTypes","clear","setNativeProps","text","render","_renderIOS","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityTraits","nativeID","testID","state","height","Constants","AutoCapitalizationType","_onContentSizeChange","_onLayout","accessibilityComponentType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","contentHeight","contentSize","Math","min","setState","max","layout","componentDidUpdate","nativeProps","Object","keys","length","update","create","paddingTop","module","exports"],"mappings":"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","file":"TextInput.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TextInput\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextInputState = require('TextInputState');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nif (Platform.OS === 'android') {\n  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);\n} else if (Platform.OS === 'ios') {\n  var RCTTextView = requireNativeComponent('RCTTextView', null);\n  var RCTTextField = requireNativeComponent('RCTTextField', null);\n}\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    /* TODO(brentvatne) docs are needed for this */\n    State: TextInputState,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * If true, will increase the height of the textbox if need be. If false,\n     * the textbox will become scrollable once the height is reached. The\n     * default value is false.\n     * @platform android\n     */\n    autoGrow: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `number-pad`\n     * - `name-phone-pad`\n     * - `decimal-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'number-pad',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf([\n      'default',\n      'light',\n      'dark',\n    ]),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * If autogrow is `true`, limits the height that the TextInput box can grow\n     * to. Once it reaches this height, the TextInput becomes scrollable.\n     */\n    maxHeight: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     * @platform ios\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n    * The highlight and cursor color of the text input.\n    */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     */\n    caretHidden: PropTypes.bool,\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  getInitialState: function() {\n    return {layoutHeight: this._layoutHeight};\n  },\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef);\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n  _layoutHeight: (-1: number),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    if (!this.context.focusEmitter) {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n      return;\n    }\n    this._focusSubscription = this.context.focusEmitter.addListener(\n      'focus',\n      (el) => {\n        if (this === el) {\n          this.requestAnimationFrame(this.focus);\n        } else if (this.isFocused()) {\n          this.blur();\n        }\n      }\n    );\n    if (this.props.autoFocus) {\n      this.context.onFocusRequested(this);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n  },\n\n  getChildContext: function(): Object {\n    return {isInAParentText: true};\n  },\n\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    if (Platform.OS === 'ios') {\n      return this._renderIOS();\n    } else if (Platform.OS === 'android') {\n      return this._renderAndroid();\n    }\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string' ?\n      this.props.value :\n      (\n        typeof this.props.defaultValue === 'string' ?\n        this.props.defaultValue :\n        ''\n      );\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOS: function() {\n    var textContainer;\n\n    var props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (var propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' + propKey + '` is only supported with multiline.'\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer =\n        <RCTTextField\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />;\n    } else {\n      var children = props.children;\n      var childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.'\n      );\n      if (childCount >= 1) {\n        children = <Text style={props.style} allowFontScaling={props.allowFontScaling}>{children}</Text>;\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer =\n        <RCTTextView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />;\n    }\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityTraits={props.accessibilityTraits}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = this.props.style;\n    if (this.state.layoutHeight >= 0) {\n      props.style = [props.style, {height: this.state.layoutHeight}];\n    }\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    var children = this.props.children;\n    var childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.'\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n    const textContainer =\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this._onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />;\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={this._onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityComponentType={this.props.accessibilityComponentType}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    var text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onContentSizeChange: function(event: Event) {\n    let contentHeight = event.nativeEvent.contentSize.height;\n    if (this.props.autoGrow) {\n      if (this.props.maxHeight) {\n        contentHeight = Math.min(this.props.maxHeight, contentHeight);\n      }\n      this.setState({layoutHeight: Math.max(this._layoutHeight, contentHeight)});\n    }\n\n    this.props.onContentSizeChange && this.props.onContentSizeChange(event);\n  },\n\n  _onLayout: function(event: Event) {\n    const height = event.nativeEvent.layout.height;\n    if (height) {\n      this._layoutHeight = event.nativeEvent.layout.height;\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function () {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (this._lastNativeSelection && selection &&\n        (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nvar styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTTextView seem as close as possible\n    // to single-line RCTTextField defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TextInput;\n"]}