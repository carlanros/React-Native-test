{"version":3,"sources":["_updateWrapDetails.js"],"names":["arrayEach","require","arrayIncludes","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","WRAP_FLIP_FLAG","wrapFlags","updateWrapDetails","details","bitmask","pair","value","push","sort","module","exports"],"mappings":"AAAA,GAAIA,WAAYC,QAAQ,cAAR,CAAhB,CACIC,cAAgBD,QAAQ,kBAAR,CADpB,CAIA,GAAIE,gBAAiB,CAArB,CACIC,mBAAqB,CADzB,CAEIC,gBAAkB,CAFtB,CAGIC,sBAAwB,EAH5B,CAIIC,kBAAoB,EAJxB,CAKIC,wBAA0B,EAL9B,CAMIC,cAAgB,GANpB,CAOIC,gBAAkB,GAPtB,CAQIC,eAAiB,GARrB,CAWA,GAAIC,WAAY,CACd,CAAC,KAAD,CAAQH,aAAR,CADc,CAEd,CAAC,MAAD,CAASN,cAAT,CAFc,CAGd,CAAC,SAAD,CAAYC,kBAAZ,CAHc,CAId,CAAC,OAAD,CAAUC,eAAV,CAJc,CAKd,CAAC,YAAD,CAAeC,qBAAf,CALc,CAMd,CAAC,MAAD,CAASK,cAAT,CANc,CAOd,CAAC,SAAD,CAAYJ,iBAAZ,CAPc,CAQd,CAAC,cAAD,CAAiBC,uBAAjB,CARc,CASd,CAAC,OAAD,CAAUE,eAAV,CATc,CAAhB,CAoBA,QAASG,kBAAT,CAA2BC,OAA3B,CAAoCC,OAApC,CAA6C,CAC3Cf,UAAUY,SAAV,CAAqB,SAASI,IAAT,CAAe,CAClC,GAAIC,OAAQ,KAAOD,KAAK,CAAL,CAAnB,CACA,GAAKD,QAAUC,KAAK,CAAL,CAAX,EAAuB,CAACd,cAAcY,OAAd,CAAuBG,KAAvB,CAA5B,CAA2D,CACzDH,QAAQI,IAAR,CAAaD,KAAb,EACD,CACF,CALD,EAMA,MAAOH,SAAQK,IAAR,EAAP,CACD,CAEDC,OAAOC,OAAP,CAAiBR,iBAAjB","file":"_updateWrapDetails.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n"]}