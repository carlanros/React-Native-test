b3ba612a1b67075f8c7a7ab37989fb0d
Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&typeof(typeof Symbol==="function"?Symbol.iterator:"@@iterator")==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==(typeof Symbol==="function"?Symbol.prototype:"@@prototype")?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _object=require("object.assign");var _object2=_interopRequireDefault(_object);var _cheerio=require("cheerio");var _cheerio2=_interopRequireDefault(_cheerio);var _flatten=require("lodash/flatten");var _flatten2=_interopRequireDefault(_flatten);var _uniq=require("lodash/uniq");var _uniq2=_interopRequireDefault(_uniq);var _compact=require("lodash/compact");var _compact2=_interopRequireDefault(_compact);var _Utils=require('./Utils');var _Debug=require('./Debug');var _RSTTraversal=require('./RSTTraversal');var _selectors=require('./selectors');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var noop=function noop(){};var NODE=(0,_Utils.sym)('__node__');var NODES=(0,_Utils.sym)('__nodes__');var RENDERER=(0,_Utils.sym)('__renderer__');var UNRENDERED=(0,_Utils.sym)('__unrendered__');var ROOT=(0,_Utils.sym)('__root__');var OPTIONS=(0,_Utils.sym)('__options__');function findWhereUnwrapped(wrapper,predicate){var filter=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_RSTTraversal.treeFilter;return wrapper.flatMap(function(n){return filter(n.getNodeInternal(),predicate);});}function filterWhereUnwrapped(wrapper,predicate){return wrapper.wrap((0,_compact2['default'])(wrapper.getNodesInternal().filter(predicate)));}var ReactWrapper=function(){function ReactWrapper(nodes,root){var passedOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,ReactWrapper);if(!global.window&&!global.document){throw new Error('It looks like you called `mount()` without a global document being loaded.');}var options=(0,_Utils.makeOptions)(passedOptions);if(!root){(0,_Utils.privateSet)(this,UNRENDERED,nodes);var renderer=(0,_Utils.getAdapter)(options).createRenderer((0,_object2['default'])({mode:'mount'},options));(0,_Utils.privateSet)(this,RENDERER,renderer);renderer.render(nodes,options.context);(0,_Utils.privateSet)(this,ROOT,this);var node=this[RENDERER].getNode();(0,_Utils.privateSet)(this,NODE,node);(0,_Utils.privateSet)(this,NODES,[node]);this.length=1;}else{(0,_Utils.privateSet)(this,UNRENDERED,null);(0,_Utils.privateSet)(this,RENDERER,root[RENDERER]);(0,_Utils.privateSet)(this,ROOT,root);if(!nodes){(0,_Utils.privateSet)(this,NODE,null);(0,_Utils.privateSet)(this,NODES,[]);}else if(!Array.isArray(nodes)){(0,_Utils.privateSet)(this,NODE,nodes);(0,_Utils.privateSet)(this,NODES,[nodes]);}else{(0,_Utils.privateSet)(this,NODE,nodes[0]);(0,_Utils.privateSet)(this,NODES,nodes);}this.length=this[NODES].length;}(0,_Utils.privateSet)(this,OPTIONS,root?root[OPTIONS]:options);}_createClass(ReactWrapper,[{key:'root',value:function(){function root(){return this[ROOT];}return root;}()},{key:'getNodeInternal',value:function(){function getNodeInternal(){if(this.length!==1){throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');}return this[NODES][0];}return getNodeInternal;}()},{key:'getNodesInternal',value:function(){function getNodesInternal(){return this[NODES];}return getNodesInternal;}()},{key:'getElement',value:function(){function getElement(){if(this.length!==1){throw new Error('ReactWrapper::getElement() can only be called when wrapping one node');}return(0,_Utils.getAdapter)(this[OPTIONS]).nodeToElement(this[NODE]);}return getElement;}()},{key:'getElements',value:function(){function getElements(){return this[NODES].map((0,_Utils.getAdapter)(this[OPTIONS]).nodeToElement);}return getElements;}()},{key:'getNode',value:function(){function getNode(){throw new Error('ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead');}return getNode;}()},{key:'getNodes',value:function(){function getNodes(){throw new Error('ReactWrapper::getNodes() is no longer supported.');}return getNodes;}()},{key:'getDOMNode',value:function(){function getDOMNode(){var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);return this.single('getDOMNode',function(n){return adapter.nodeToHostNode(n);});}return getDOMNode;}()},{key:'ref',value:function(){function ref(refname){if(this[ROOT]!==this){throw new Error('ReactWrapper::ref(refname) can only be called on the root');}return this.instance().refs[refname];}return ref;}()},{key:'instance',value:function(){function instance(){if(this.length!==1){throw new Error('ReactWrapper::instance() can only be called on single nodes');}return this[NODE].instance;}return instance;}()},{key:'update',value:function(){function update(){var _this=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::update() can only be called on the root');}this.single('update',function(){var node=_this[RENDERER].getNode();_this[NODE]=node;_this[NODES]=[node];});return this;}return update;}()},{key:'unmount',value:function(){function unmount(){var _this2=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::unmount() can only be called on the root');}this.single('unmount',function(){_this2[RENDERER].unmount();_this2.update();});return this;}return unmount;}()},{key:'mount',value:function(){function mount(){var _this3=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::mount() can only be called on the root');}this.single('mount',function(){_this3[RENDERER].render(_this3[UNRENDERED],_this3[OPTIONS].context,function(){return _this3.update();});});return this;}return mount;}()},{key:'setProps',value:function(){function setProps(props){var _this4=this;var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:noop;if(this[ROOT]!==this){throw new Error('ReactWrapper::setProps() can only be called on the root');}if(typeof callback!=='function'){throw new TypeError('ReactWrapper::setProps() expects a function as its second argument');}var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);this[UNRENDERED]=(0,_Utils.cloneElement)(adapter,this[UNRENDERED],props);this[RENDERER].render(this[UNRENDERED],null,function(){_this4.update();callback();});return this;}return setProps;}()},{key:'setState',value:function(){function setState(state){var _this5=this;var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:noop;if(this[ROOT]!==this){throw new Error('ReactWrapper::setState() can only be called on the root');}if(typeof callback!=='function'){throw new TypeError('ReactWrapper::setState() expects a function as its second argument');}this.instance().setState(state,function(){_this5.update();callback();});return this;}return setState;}()},{key:'setContext',value:function(){function setContext(context){var _this6=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::setContext() can only be called on the root');}if(!this[OPTIONS].context){throw new Error('ShallowWrapper::setContext() can only be called on a wrapper that was originally passed a context option');}this[RENDERER].render(this[UNRENDERED],context,function(){return _this6.update();});return this;}return setContext;}()},{key:'matchesElement',value:function(){function matchesElement(node){var _this7=this;return this.single('matchesElement',function(){return(0,_Utils.nodeMatches)(node,_this7.getNodeInternal(),function(a,b){return a<=b;});});}return matchesElement;}()},{key:'contains',value:function(){function contains(nodeOrNodes){var predicate=Array.isArray(nodeOrNodes)?function(other){return(0,_Utils.containsChildrenSubArray)(_Utils.nodeEqual,other,nodeOrNodes);}:function(other){return(0,_Utils.nodeEqual)(nodeOrNodes,other);};return findWhereUnwrapped(this,predicate).length>0;}return contains;}()},{key:'containsMatchingElement',value:function(){function containsMatchingElement(node){var predicate=function(){function predicate(other){return(0,_Utils.nodeMatches)(node,other,function(a,b){return a<=b;});}return predicate;}();return findWhereUnwrapped(this,predicate).length>0;}return containsMatchingElement;}()},{key:'containsAllMatchingElements',value:function(){function containsAllMatchingElements(nodes){var _this8=this;if(!Array.isArray(nodes)){throw new TypeError('nodes should be an Array');}return nodes.every(function(node){return _this8.containsMatchingElement(node);});}return containsAllMatchingElements;}()},{key:'containsAnyMatchingElements',value:function(){function containsAnyMatchingElements(nodes){var _this9=this;return Array.isArray(nodes)&&nodes.some(function(node){return _this9.containsMatchingElement(node);});}return containsAnyMatchingElements;}()},{key:'find',value:function(){function find(selector){return this.wrap((0,_selectors.reduceTreesBySelector)(selector,this.getNodesInternal()));}return find;}()},{key:'is',value:function(){function is(selector){var predicate=(0,_selectors.buildPredicate)(selector);return this.single('is',function(n){return predicate(n);});}return is;}()},{key:'isEmptyRender',value:function(){function isEmptyRender(){return this.single('isEmptyRender',function(n){return n.rendered===null;});}return isEmptyRender;}()},{key:'filterWhere',value:function(){function filterWhere(predicate){var _this10=this;return filterWhereUnwrapped(this,function(n){return predicate(_this10.wrap(n));});}return filterWhere;}()},{key:'filter',value:function(){function filter(selector){var predicate=(0,_selectors.buildPredicate)(selector);return filterWhereUnwrapped(this,predicate);}return filter;}()},{key:'not',value:function(){function not(selector){var predicate=(0,_selectors.buildPredicate)(selector);return filterWhereUnwrapped(this,function(n){return!predicate(n);});}return not;}()},{key:'text',value:function(){function text(){var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);return this.single('text',function(n){return adapter.nodeToHostNode(n).textContent;});}return text;}()},{key:'html',value:function(){function html(){var _this11=this;return this.single('html',function(n){if(n===null)return null;var adapter=(0,_Utils.getAdapter)(_this11[OPTIONS]);var node=adapter.nodeToHostNode(n);return node===null?null:node.outerHTML.replace(/\sdata-(reactid|reactroot)+="([^"]*)+"/g,'');});}return html;}()},{key:'render',value:function(){function render(){var html=this.html();return html===null?(0,_cheerio2['default'])():_cheerio2['default'].load('')(html);}return render;}()},{key:'simulate',value:function(){function simulate(event){var _this12=this;var mock=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.single('simulate',function(n){_this12[RENDERER].simulateEvent(n,event,mock);_this12[ROOT].update();});return this;}return simulate;}()},{key:'props',value:function(){function props(){return this.single('props',_RSTTraversal.propsOfNode);}return props;}()},{key:'state',value:function(){function state(name){var _this13=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::state() can only be called on the root');}var _state=this.single('state',function(){return _this13.instance().state;});if(typeof name!=='undefined'){return _state[name];}return _state;}return state;}()},{key:'context',value:function(){function context(name){var _this14=this;if(this[ROOT]!==this){throw new Error('ReactWrapper::context() can only be called on the root');}var instance=this.single('context',function(){return _this14.instance();});if(instance===null){throw new Error('ReactWrapper::context() can only be called on components with instances');}var _context=instance.context;if(typeof name!=='undefined'){return _context[name];}return _context;}return context;}()},{key:'children',value:function(){function children(selector){var allChildren=this.flatMap(function(n){return(0,_RSTTraversal.childrenOfNode)(n.getNodeInternal()).filter(function(x){return(typeof x==='undefined'?'undefined':_typeof(x))==='object';});});return selector?allChildren.filter(selector):allChildren;}return children;}()},{key:'childAt',value:function(){function childAt(index){var _this15=this;return this.single('childAt',function(){return _this15.children().at(index);});}return childAt;}()},{key:'parents',value:function(){function parents(selector){var _this16=this;var allParents=this.wrap(this.single('parents',function(n){return(0,_RSTTraversal.parentsOfNode)(n,_this16[ROOT].getNodeInternal());}));return selector?allParents.filter(selector):allParents;}return parents;}()},{key:'parent',value:function(){function parent(){return this.flatMap(function(n){return[n.parents().get(0)];});}return parent;}()},{key:'closest',value:function(){function closest(selector){return this.is(selector)?this:this.parents().filter(selector).first();}return closest;}()},{key:'prop',value:function(){function prop(propName){return this.props()[propName];}return prop;}()},{key:'key',value:function(){function key(){return this.single('key',function(n){return n.key;});}return key;}()},{key:'type',value:function(){function type(){return this.single('type',function(n){return(0,_Utils.typeOfNode)(n);});}return type;}()},{key:'name',value:function(){function name(){return this.single('name',function(n){return(0,_Utils.displayNameOfNode)(n);});}return name;}()},{key:'hasClass',value:function(){function hasClass(className){if(className&&className.indexOf('.')!==-1){console.warn('It looks like you\'re calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');}return this.single('hasClass',function(n){return(0,_RSTTraversal.hasClassName)(n,className);});}return hasClass;}()},{key:'forEach',value:function(){function forEach(fn){var _this17=this;this.getNodesInternal().forEach(function(n,i){return fn.call(_this17,_this17.wrap(n),i);});return this;}return forEach;}()},{key:'map',value:function(){function map(fn){var _this18=this;return this.getNodesInternal().map(function(n,i){return fn.call(_this18,_this18.wrap(n),i);});}return map;}()},{key:'reduce',value:function(){function reduce(fn){var _this19=this;var initialValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;if(arguments.length>1){return this.getNodesInternal().reduce(function(accum,n,i){return fn.call(_this19,accum,_this19.wrap(n),i);},initialValue);}return this.getNodesInternal().reduce(function(accum,n,i){return fn.call(_this19,i===1?_this19.wrap(accum):accum,_this19.wrap(n),i);});}return reduce;}()},{key:'reduceRight',value:function(){function reduceRight(fn){var _this20=this;var initialValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;if(arguments.length>1){return this.getNodesInternal().reduceRight(function(accum,n,i){return fn.call(_this20,accum,_this20.wrap(n),i);},initialValue);}return this.getNodesInternal().reduceRight(function(accum,n,i){return fn.call(_this20,i===1?_this20.wrap(accum):accum,_this20.wrap(n),i);});}return reduceRight;}()},{key:'slice',value:function(){function slice(begin,end){return this.wrap(this.getNodesInternal().slice(begin,end));}return slice;}()},{key:'some',value:function(){function some(selector){if(this[ROOT]===this){throw new Error('ReactWrapper::some() can not be called on the root');}var predicate=(0,_selectors.buildPredicate)(selector);return this.getNodesInternal().some(predicate);}return some;}()},{key:'someWhere',value:function(){function someWhere(predicate){var _this21=this;return this.getNodesInternal().some(function(n,i){return predicate.call(_this21,_this21.wrap(n),i);});}return someWhere;}()},{key:'every',value:function(){function every(selector){var predicate=(0,_selectors.buildPredicate)(selector);return this.getNodesInternal().every(predicate);}return every;}()},{key:'everyWhere',value:function(){function everyWhere(predicate){var _this22=this;return this.getNodesInternal().every(function(n,i){return predicate.call(_this22,_this22.wrap(n),i);});}return everyWhere;}()},{key:'flatMap',value:function(){function flatMap(fn){var _this23=this;var nodes=this.getNodesInternal().map(function(n,i){return fn.call(_this23,_this23.wrap(n),i);});var flattened=(0,_flatten2['default'])(nodes,true);var uniques=(0,_uniq2['default'])(flattened);var compacted=(0,_compact2['default'])(uniques);return this.wrap(compacted);}return flatMap;}()},{key:'findWhere',value:function(){function findWhere(predicate){var _this24=this;return findWhereUnwrapped(this,function(n){return predicate(_this24.wrap(n));});}return findWhere;}()},{key:'get',value:function(){function get(index){return this.getElements()[index];}return get;}()},{key:'at',value:function(){function at(index){return this.wrap(this.getNodesInternal()[index]);}return at;}()},{key:'first',value:function(){function first(){return this.at(0);}return first;}()},{key:'last',value:function(){function last(){return this.at(this.length-1);}return last;}()},{key:'isEmpty',value:function(){function isEmpty(){console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');return!this.exists();}return isEmpty;}()},{key:'exists',value:function(){function exists(){return this.length>0;}return exists;}()},{key:'single',value:function(){function single(name,fn){var fnName=typeof name==='string'?name:'unknown';var callback=typeof fn==='function'?fn:name;if(this.length!==1){throw new Error("Method \u201C"+fnName+"\u201D is only meant to be run on a single node. "+String(this.length)+' found instead.');}return callback.call(this,this.getNodeInternal());}return single;}()},{key:'wrap',value:function(){function wrap(node){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this[ROOT];if(node instanceof ReactWrapper){return node;}for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}return new(Function.prototype.bind.apply(ReactWrapper,[null].concat([node,root],args)))();}return wrap;}()},{key:'debug',value:function(){function debug(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return(0,_Debug.debugNodes)(this.getNodesInternal(),options);}return debug;}()},{key:'tap',value:function(){function tap(intercepter){intercepter(this);return this;}return tap;}()},{key:'detach',value:function(){function detach(){if(this[ROOT]!==this){throw new Error('ReactWrapper::detach() can only be called on the root');}if(!this[OPTIONS].attachTo){throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.');}this[RENDERER].unmount();}return detach;}()},{key:'hostNodes',value:function(){function hostNodes(){return this.filterWhere(function(n){return typeof n.type()==='string';});}return hostNodes;}()}]);return ReactWrapper;}();if(_Utils.ITERATOR_SYMBOL){Object.defineProperty(ReactWrapper.prototype,_Utils.ITERATOR_SYMBOL,{configurable:true,value:function(){function iterator(){var iter=this[NODES][_Utils.ITERATOR_SYMBOL]();var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);return{next:function(){function next(){var next=iter.next();if(next.done){return{done:true};}return{done:false,value:adapter.nodeToElement(next.value)};}return next;}()};}return iterator;}()});}function privateWarning(prop,extraMessage){Object.defineProperty(ReactWrapper.prototype,prop,{get:function(){function get(){throw new Error('\n        Attempted to access ReactWrapper::'+String(prop)+', which was previously a private property on\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\n        '+String(extraMessage)+'\n      ');}return get;}(),enumerable:false,configurable:false});}privateWarning('node','Consider using the getElement() method instead.');privateWarning('nodes','Consider using the getElements() method instead.');privateWarning('renderer','');privateWarning('options','');privateWarning('complexSelector','');exports['default']=ReactWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,