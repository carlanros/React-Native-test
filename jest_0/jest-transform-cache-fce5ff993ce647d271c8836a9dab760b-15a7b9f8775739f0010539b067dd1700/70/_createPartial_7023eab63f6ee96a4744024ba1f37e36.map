{"version":3,"sources":["_createPartial.js"],"names":["apply","require","createCtor","root","WRAP_BIND_FLAG","createPartial","func","bitmask","thisArg","partials","isBind","Ctor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn","module","exports"],"mappings":"AAAA,GAAIA,OAAQC,QAAQ,UAAR,CAAZ,CACIC,WAAaD,QAAQ,eAAR,CADjB,CAEIE,KAAOF,QAAQ,SAAR,CAFX,CAKA,GAAIG,gBAAiB,CAArB,CAcA,QAASC,cAAT,CAAuBC,IAAvB,CAA6BC,OAA7B,CAAsCC,OAAtC,CAA+CC,QAA/C,CAAyD,CACvD,GAAIC,QAASH,QAAUH,cAAvB,CACIO,KAAOT,WAAWI,IAAX,CADX,CAGA,QAASM,QAAT,EAAmB,CACjB,GAAIC,WAAY,CAAC,CAAjB,CACIC,WAAaC,UAAUC,MAD3B,CAEIC,UAAY,CAAC,CAFjB,CAGIC,WAAaT,SAASO,MAH1B,CAIIG,KAAOC,MAAMF,WAAaJ,UAAnB,CAJX,CAKIO,GAAM,MAAQ,OAASlB,IAAjB,EAAyB,eAAgBS,QAA1C,CAAqDD,IAArD,CAA4DL,IALrE,CAOA,MAAO,EAAEW,SAAF,CAAcC,UAArB,CAAiC,CAC/BC,KAAKF,SAAL,EAAkBR,SAASQ,SAAT,CAAlB,CACD,CACD,MAAOH,YAAP,CAAqB,CACnBK,KAAKF,WAAL,EAAoBF,UAAU,EAAEF,SAAZ,CAApB,CACD,CACD,MAAOb,OAAMqB,EAAN,CAAUX,OAASF,OAAT,CAAmB,IAA7B,CAAmCW,IAAnC,CAAP,CACD,CACD,MAAOP,QAAP,CACD,CAEDU,OAAOC,OAAP,CAAiBlB,aAAjB","file":"_createPartial.js","sourcesContent":["var apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartial;\n"]}