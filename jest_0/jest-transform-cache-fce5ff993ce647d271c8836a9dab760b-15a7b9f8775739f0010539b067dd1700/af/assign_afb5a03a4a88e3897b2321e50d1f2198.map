{"version":3,"sources":["assign.js"],"names":["assignValue","require","copyObject","createAssigner","isArrayLike","isPrototype","keys","objectProto","Object","prototype","hasOwnProperty","assign","object","source","key","call","module","exports"],"mappings":"AAAA,GAAIA,aAAcC,QAAQ,gBAAR,CAAlB,CACIC,WAAaD,QAAQ,eAAR,CADjB,CAEIE,eAAiBF,QAAQ,mBAAR,CAFrB,CAGIG,YAAcH,QAAQ,eAAR,CAHlB,CAIII,YAAcJ,QAAQ,gBAAR,CAJlB,CAKIK,KAAOL,QAAQ,QAAR,CALX,CAQA,GAAIM,aAAcC,OAAOC,SAAzB,CAGA,GAAIC,gBAAiBH,YAAYG,cAAjC,CAkCA,GAAIC,QAASR,eAAe,SAASS,MAAT,CAAiBC,MAAjB,CAAyB,CACnD,GAAIR,YAAYQ,MAAZ,GAAuBT,YAAYS,MAAZ,CAA3B,CAAgD,CAC9CX,WAAWW,MAAX,CAAmBP,KAAKO,MAAL,CAAnB,CAAiCD,MAAjC,EACA,OACD,CACD,IAAK,GAAIE,IAAT,GAAgBD,OAAhB,CAAwB,CACtB,GAAIH,eAAeK,IAAf,CAAoBF,MAApB,CAA4BC,GAA5B,CAAJ,CAAsC,CACpCd,YAAYY,MAAZ,CAAoBE,GAApB,CAAyBD,OAAOC,GAAP,CAAzB,EACD,CACF,CACF,CAVY,CAAb,CAYAE,OAAOC,OAAP,CAAiBN,MAAjB","file":"assign.js","sourcesContent":["var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"]}