{"version":3,"sources":["_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":"AAAA,GAAIA,QAASC,QAAQ,WAAR,CAAb,CACIC,SAAWD,QAAQ,aAAR,CADf,CAEIE,QAAUF,QAAQ,WAAR,CAFd,CAGIG,SAAWH,QAAQ,YAAR,CAHf,CAMA,GAAII,UAAW,EAAI,CAAnB,CAGA,GAAIC,aAAcN,kCAASA,OAAOO,SAAhB,eAA4BC,SAA9C,CACIC,eAAiBH,YAAcA,YAAYI,QAA1B,CAAqCF,SAD1D,CAWA,QAASG,aAAT,CAAsBC,KAAtB,CAA6B,CAE3B,GAAI,MAAOA,MAAP,EAAgB,QAApB,CAA8B,CAC5B,MAAOA,MAAP,CACD,CACD,GAAIT,QAAQS,KAAR,CAAJ,CAAoB,CAElB,MAAOV,UAASU,KAAT,CAAgBD,YAAhB,EAAgC,EAAvC,CACD,CACD,GAAIP,SAASQ,KAAT,CAAJ,CAAqB,CACnB,MAAOH,gBAAiBA,eAAeI,IAAf,CAAoBD,KAApB,CAAjB,CAA8C,EAArD,CACD,CACD,GAAIE,QAAUF,MAAQ,EAAtB,CACA,MAAQE,SAAU,GAAV,EAAkB,EAAIF,KAAL,EAAe,CAACP,QAAlC,CAA8C,IAA9C,CAAqDS,MAA5D,CACD,CAEDC,OAAOC,OAAP,CAAiBL,YAAjB","file":"_baseToString.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]}