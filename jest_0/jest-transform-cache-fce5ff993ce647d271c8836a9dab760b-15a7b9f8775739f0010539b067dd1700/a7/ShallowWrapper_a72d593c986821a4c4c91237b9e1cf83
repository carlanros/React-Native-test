a8573cc1d4753958d76b53b17be5e20c
Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _object=require("object.assign");var _object2=_interopRequireDefault(_object);var _flatten=require("lodash/flatten");var _flatten2=_interopRequireDefault(_flatten);var _uniq=require("lodash/uniq");var _uniq2=_interopRequireDefault(_uniq);var _compact=require("lodash/compact");var _compact2=_interopRequireDefault(_compact);var _cheerio=require("cheerio");var _cheerio2=_interopRequireDefault(_cheerio);var _Utils=require('./Utils');var _Debug=require('./Debug');var _RSTTraversal=require('./RSTTraversal');var _selectors=require('./selectors');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var NODE=(0,_Utils.sym)('__node__');var NODES=(0,_Utils.sym)('__nodes__');var RENDERER=(0,_Utils.sym)('__renderer__');var UNRENDERED=(0,_Utils.sym)('__unrendered__');var ROOT=(0,_Utils.sym)('__root__');var OPTIONS=(0,_Utils.sym)('__options__');function findWhereUnwrapped(wrapper,predicate){var filter=arguments.length>2&&arguments[2]!==undefined?arguments[2]:_RSTTraversal.treeFilter;return wrapper.flatMap(function(n){return filter(n.getNodeInternal(),predicate);});}function filterWhereUnwrapped(wrapper,predicate){return wrapper.wrap((0,_compact2['default'])(wrapper.getNodesInternal().filter(predicate)));}function validateOptions(options){var lifecycleExperimental=options.lifecycleExperimental,disableLifecycleMethods=options.disableLifecycleMethods;if(typeof lifecycleExperimental!=='undefined'&&typeof lifecycleExperimental!=='boolean'){throw new Error('lifecycleExperimental must be either true or false if provided');}if(typeof disableLifecycleMethods!=='undefined'&&typeof disableLifecycleMethods!=='boolean'){throw new Error('disableLifecycleMethods must be either true or false if provided');}if(lifecycleExperimental!=null&&disableLifecycleMethods!=null&&lifecycleExperimental===disableLifecycleMethods){throw new Error('lifecycleExperimental and disableLifecycleMethods cannot be set to the same value');}}function getRootNode(node){if(node.nodeType==='host'){return node;}return node.rendered;}var ShallowWrapper=function(){function ShallowWrapper(nodes,root){var passedOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,ShallowWrapper);validateOptions(passedOptions);var options=(0,_Utils.makeOptions)(passedOptions);if(!root){(0,_Utils.privateSet)(this,ROOT,this);(0,_Utils.privateSet)(this,UNRENDERED,nodes);var renderer=(0,_Utils.getAdapter)(options).createRenderer((0,_object2['default'])({mode:'shallow'},options));(0,_Utils.privateSet)(this,RENDERER,renderer);this[RENDERER].render(nodes,options.context);var _RENDERER$getNode=this[RENDERER].getNode(),instance=_RENDERER$getNode.instance;if(!options.disableLifecycleMethods&&instance&&typeof instance.componentDidMount==='function'){this[RENDERER].batchedUpdates(function(){instance.componentDidMount();});}(0,_Utils.privateSet)(this,NODE,getRootNode(this[RENDERER].getNode()));(0,_Utils.privateSet)(this,NODES,[this[NODE]]);this.length=1;}else{(0,_Utils.privateSet)(this,ROOT,root);(0,_Utils.privateSet)(this,UNRENDERED,null);(0,_Utils.privateSet)(this,RENDERER,root[RENDERER]);if(!Array.isArray(nodes)){(0,_Utils.privateSet)(this,NODE,nodes);(0,_Utils.privateSet)(this,NODES,[nodes]);}else{(0,_Utils.privateSet)(this,NODE,nodes[0]);(0,_Utils.privateSet)(this,NODES,nodes);}this.length=this[NODES].length;}(0,_Utils.privateSet)(this,OPTIONS,root?root[OPTIONS]:options);}_createClass(ShallowWrapper,[{key:'root',value:function(){function root(){return this[ROOT];}return root;}()},{key:'getNodeInternal',value:function(){function getNodeInternal(){if(this.length!==1){throw new Error('ShallowWrapper::getNode() can only be called when wrapping one node');}return this[NODE];}return getNodeInternal;}()},{key:'getElement',value:function(){function getElement(){if(this.length!==1){throw new Error('ShallowWrapper::getElement() can only be called when wrapping one node');}return(0,_Utils.getAdapter)(this[OPTIONS]).nodeToElement(this[NODE]);}return getElement;}()},{key:'getElements',value:function(){function getElements(){return this[NODES].map((0,_Utils.getAdapter)(this[OPTIONS]).nodeToElement);}return getElements;}()},{key:'getNode',value:function(){function getNode(){throw new Error('ShallowWrapper::getNode() is no longer supported. Use ShallowWrapper::getElement() instead');}return getNode;}()},{key:'getNodesInternal',value:function(){function getNodesInternal(){return this[NODES];}return getNodesInternal;}()},{key:'getNodes',value:function(){function getNodes(){throw new Error('ShallowWrapper::getNodes() is no longer supported. Use ShallowWrapper::getElements() instead');}return getNodes;}()},{key:'instance',value:function(){function instance(){if(this[ROOT]!==this){throw new Error('ShallowWrapper::instance() can only be called on the root');}return this[RENDERER].getNode().instance;}return instance;}()},{key:'update',value:function(){function update(){var _this=this;if(this[ROOT]!==this){throw new Error('ShallowWrapper::update() can only be called on the root');}this.single('update',function(){_this[NODE]=getRootNode(_this[RENDERER].getNode());_this[NODES]=[_this[NODE]];});return this;}return update;}()},{key:'rerender',value:function(){function rerender(props,context){var _this2=this;var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);this.single('rerender',function(){(0,_Utils.withSetStateAllowed)(function(){var instance=_this2.instance()||{};var state=instance.state;var prevProps=instance.props||_this2[UNRENDERED].props;var prevContext=instance.context||_this2[OPTIONS].context;var nextProps=(0,_object2['default'])({},prevProps,props);var nextContext=context||prevContext;if(context){_this2[OPTIONS]=(0,_object2['default'])({},_this2[OPTIONS],{context:nextContext});}_this2[RENDERER].batchedUpdates(function(){var shouldRender=true;var originalComponentWillReceiveProps=void 0;if(!_this2[OPTIONS].disableLifecycleMethods&&instance&&typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(nextProps,nextContext);originalComponentWillReceiveProps=instance.componentWillReceiveProps;instance.componentWillReceiveProps=function(){};}var originalShouldComponentUpdate=void 0;if(!_this2[OPTIONS].disableLifecycleMethods&&instance&&typeof instance.shouldComponentUpdate==='function'){shouldRender=instance.shouldComponentUpdate(nextProps,state,nextContext);originalShouldComponentUpdate=instance.shouldComponentUpdate;}if(shouldRender){if(props)_this2[UNRENDERED]=(0,_Utils.cloneElement)(adapter,_this2[UNRENDERED],props);if(originalShouldComponentUpdate){instance.shouldComponentUpdate=function(){return true;};}_this2[RENDERER].render(_this2[UNRENDERED],nextContext);if(originalShouldComponentUpdate){instance.shouldComponentUpdate=originalShouldComponentUpdate;}if(!_this2[OPTIONS].disableLifecycleMethods&&instance&&typeof instance.componentDidUpdate==='function'){if(adapter.options.supportPrevContextArgumentOfComponentDidUpdate){instance.componentDidUpdate(prevProps,state,prevContext);}else{instance.componentDidUpdate(prevProps,state);}}_this2.update();}else if(props){instance.props=props;}if(originalComponentWillReceiveProps){instance.componentWillReceiveProps=originalComponentWillReceiveProps;}});});});return this;}return rerender;}()},{key:'setProps',value:function(){function setProps(props){if(this[ROOT]!==this){throw new Error('ShallowWrapper::setProps() can only be called on the root');}return this.rerender(props);}return setProps;}()},{key:'setState',value:function(){function setState(state){var _this3=this;var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;if(this[ROOT]!==this){throw new Error('ShallowWrapper::setState() can only be called on the root');}if(this.instance()===null||this[RENDERER].getNode().nodeType==='function'){throw new Error('ShallowWrapper::setState() can only be called on class components');}this.single('setState',function(){(0,_Utils.withSetStateAllowed)(function(){var adapter=(0,_Utils.getAdapter)(_this3[OPTIONS]);var instance=_this3.instance();var prevProps=instance.props;var prevState=instance.state;var prevContext=instance.context;var shouldRender=true;var originalShouldComponentUpdate=void 0;if(!_this3[OPTIONS].disableLifecycleMethods&&adapter.options.enableComponentDidUpdateOnSetState&&instance&&typeof instance.shouldComponentUpdate==='function'){originalShouldComponentUpdate=instance.shouldComponentUpdate;instance.shouldComponentUpdate=function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}shouldRender=originalShouldComponentUpdate.apply(instance,args);instance.shouldComponentUpdate=originalShouldComponentUpdate;return shouldRender;};}instance.setState(state,callback);if(shouldRender&&!_this3[OPTIONS].disableLifecycleMethods&&adapter.options.enableComponentDidUpdateOnSetState&&instance&&typeof instance.componentDidUpdate==='function'){if(adapter.options.supportPrevContextArgumentOfComponentDidUpdate){instance.componentDidUpdate(prevProps,prevState,prevContext);}else{instance.componentDidUpdate(prevProps,prevState);}}_this3.update();});});return this;}return setState;}()},{key:'setContext',value:function(){function setContext(context){if(this[ROOT]!==this){throw new Error('ShallowWrapper::setContext() can only be called on the root');}if(!this[OPTIONS].context){throw new Error('ShallowWrapper::setContext() can only be called on a wrapper that was originally passed a context option');}return this.rerender(null,context);}return setContext;}()},{key:'contains',value:function(){function contains(nodeOrNodes){var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);if(!(0,_Utils.isReactElementAlike)(nodeOrNodes,adapter)){throw new Error('ShallowWrapper::contains() can only be called with ReactElement (or array of them), string or number as argument.');}var predicate=Array.isArray(nodeOrNodes)?function(other){return(0,_Utils.containsChildrenSubArray)(_Utils.nodeEqual,other,nodeOrNodes.map(adapter.elementToNode));}:function(other){return(0,_Utils.nodeEqual)(adapter.elementToNode(nodeOrNodes),other);};return findWhereUnwrapped(this,predicate).length>0;}return contains;}()},{key:'containsMatchingElement',value:function(){function containsMatchingElement(node){var predicate=function(){function predicate(other){return(0,_Utils.nodeMatches)(node,other,function(a,b){return a<=b;});}return predicate;}();return findWhereUnwrapped(this,predicate).length>0;}return containsMatchingElement;}()},{key:'containsAllMatchingElements',value:function(){function containsAllMatchingElements(nodes){var _this4=this;if(!Array.isArray(nodes)){throw new TypeError('nodes should be an Array');}return nodes.every(function(node){return _this4.containsMatchingElement(node);});}return containsAllMatchingElements;}()},{key:'containsAnyMatchingElements',value:function(){function containsAnyMatchingElements(nodes){var _this5=this;return Array.isArray(nodes)&&nodes.some(function(node){return _this5.containsMatchingElement(node);});}return containsAnyMatchingElements;}()},{key:'equals',value:function(){function equals(node){var _this6=this;return this.single('equals',function(){return(0,_Utils.nodeEqual)(_this6.getNodeInternal(),node);});}return equals;}()},{key:'matchesElement',value:function(){function matchesElement(node){var _this7=this;return this.single('matchesElement',function(){return(0,_Utils.nodeMatches)(node,_this7.getNodeInternal(),function(a,b){return a<=b;});});}return matchesElement;}()},{key:'find',value:function(){function find(selector){return this.wrap((0,_selectors.reduceTreesBySelector)(selector,this.getNodesInternal()));}return find;}()},{key:'is',value:function(){function is(selector){var predicate=(0,_selectors.buildPredicate)(selector);return this.single('is',function(n){return predicate(n);});}return is;}()},{key:'isEmptyRender',value:function(){function isEmptyRender(){return this.type()===null;}return isEmptyRender;}()},{key:'filterWhere',value:function(){function filterWhere(predicate){var _this8=this;return filterWhereUnwrapped(this,function(n){return predicate(_this8.wrap(n));});}return filterWhere;}()},{key:'filter',value:function(){function filter(selector){var predicate=(0,_selectors.buildPredicate)(selector);return filterWhereUnwrapped(this,predicate);}return filter;}()},{key:'not',value:function(){function not(selector){var predicate=(0,_selectors.buildPredicate)(selector);return filterWhereUnwrapped(this,function(n){return!predicate(n);});}return not;}()},{key:'text',value:function(){function text(){return this.single('text',_RSTTraversal.getTextFromNode);}return text;}()},{key:'html',value:function(){function html(){var _this9=this;return this.single('html',function(n){if(_this9.type()===null)return null;var adapter=(0,_Utils.getAdapter)(_this9[OPTIONS]);var renderer=adapter.createRenderer((0,_object2['default'])({},_this9[OPTIONS],{mode:'string'}));return renderer.render(adapter.nodeToElement(n));});}return html;}()},{key:'render',value:function(){function render(){return this.type()===null?(0,_cheerio2['default'])():_cheerio2['default'].load('')(this.html());}return render;}()},{key:'unmount',value:function(){function unmount(){this[RENDERER].unmount();return this;}return unmount;}()},{key:'simulate',value:function(){function simulate(event){var _this10=this;for(var _len2=arguments.length,args=Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}return this.single('simulate',function(n){var _RENDERER;(_RENDERER=_this10[RENDERER]).simulateEvent.apply(_RENDERER,[n,event].concat(args));_this10[ROOT].update();});}return simulate;}()},{key:'props',value:function(){function props(){return this.single('props',_RSTTraversal.propsOfNode);}return props;}()},{key:'state',value:function(){function state(name){var _this11=this;if(this[ROOT]!==this){throw new Error('ShallowWrapper::state() can only be called on the root');}if(this.instance()===null||this[RENDERER].getNode().nodeType==='function'){throw new Error('ShallowWrapper::state() can only be called on class components');}var _state=this.single('state',function(){return _this11.instance().state;});if(typeof name!=='undefined'){return _state[name];}return _state;}return state;}()},{key:'context',value:function(){function context(name){var _this12=this;if(this[ROOT]!==this){throw new Error('ShallowWrapper::context() can only be called on the root');}if(!this[OPTIONS].context){throw new Error('ShallowWrapper::context() can only be called on a wrapper that was originally passed a context option');}if(this.instance()===null){throw new Error('ShallowWrapper::context() can only be called on wrapped nodes that have a non-null instance');}var _context=this.single('context',function(){return _this12.instance().context;});if(name){return _context[name];}return _context;}return context;}()},{key:'children',value:function(){function children(selector){var allChildren=this.flatMap(function(n){return(0,_RSTTraversal.childrenOfNode)(n.getNodeInternal());});return selector?allChildren.filter(selector):allChildren;}return children;}()},{key:'childAt',value:function(){function childAt(index){var _this13=this;return this.single('childAt',function(){return _this13.children().at(index);});}return childAt;}()},{key:'parents',value:function(){function parents(selector){var _this14=this;var allParents=this.wrap(this.single('parents',function(n){return(0,_RSTTraversal.parentsOfNode)(n,_this14[ROOT][NODE]);}));return selector?allParents.filter(selector):allParents;}return parents;}()},{key:'parent',value:function(){function parent(){return this.flatMap(function(n){return[n.parents().get(0)];});}return parent;}()},{key:'closest',value:function(){function closest(selector){return this.is(selector)?this:this.parents().filter(selector).first();}return closest;}()},{key:'shallow',value:function(){function shallow(options){var _this15=this;return this.single('shallow',function(n){return _this15.wrap((0,_Utils.getAdapter)(_this15[OPTIONS]).nodeToElement(n),null,options);});}return shallow;}()},{key:'prop',value:function(){function prop(propName){return this.props()[propName];}return prop;}()},{key:'key',value:function(){function key(){return this.single('key',function(n){return n.key;});}return key;}()},{key:'type',value:function(){function type(){return this.single('type',_Utils.typeOfNode);}return type;}()},{key:'name',value:function(){function name(){return this.single('name',_Utils.displayNameOfNode);}return name;}()},{key:'hasClass',value:function(){function hasClass(className){if(className&&className.indexOf('.')!==-1){console.warn('It looks like you\'re calling `ShallowWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');}return this.single('hasClass',function(n){return(0,_RSTTraversal.hasClassName)(n,className);});}return hasClass;}()},{key:'forEach',value:function(){function forEach(fn){var _this16=this;this.getNodesInternal().forEach(function(n,i){return fn.call(_this16,_this16.wrap(n),i);});return this;}return forEach;}()},{key:'map',value:function(){function map(fn){var _this17=this;return this.getNodesInternal().map(function(n,i){return fn.call(_this17,_this17.wrap(n),i);});}return map;}()},{key:'reduce',value:function(){function reduce(fn){var _this18=this;var initialValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;if(arguments.length>1){return this.getNodesInternal().reduce(function(accum,n,i){return fn.call(_this18,accum,_this18.wrap(n),i);},initialValue);}return this.getNodesInternal().reduce(function(accum,n,i){return fn.call(_this18,i===1?_this18.wrap(accum):accum,_this18.wrap(n),i);});}return reduce;}()},{key:'reduceRight',value:function(){function reduceRight(fn){var _this19=this;var initialValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:undefined;if(arguments.length>1){return this.getNodesInternal().reduceRight(function(accum,n,i){return fn.call(_this19,accum,_this19.wrap(n),i);},initialValue);}return this.getNodesInternal().reduceRight(function(accum,n,i){return fn.call(_this19,i===1?_this19.wrap(accum):accum,_this19.wrap(n),i);});}return reduceRight;}()},{key:'slice',value:function(){function slice(begin,end){return this.wrap(this.getNodesInternal().slice(begin,end));}return slice;}()},{key:'some',value:function(){function some(selector){if(this[ROOT]===this){throw new Error('ShallowWrapper::some() can not be called on the root');}var predicate=(0,_selectors.buildPredicate)(selector);return this.getNodesInternal().some(predicate);}return some;}()},{key:'someWhere',value:function(){function someWhere(predicate){var _this20=this;return this.getNodesInternal().some(function(n,i){return predicate.call(_this20,_this20.wrap(n),i);});}return someWhere;}()},{key:'every',value:function(){function every(selector){var predicate=(0,_selectors.buildPredicate)(selector);return this.getNodesInternal().every(predicate);}return every;}()},{key:'everyWhere',value:function(){function everyWhere(predicate){var _this21=this;return this.getNodesInternal().every(function(n,i){return predicate.call(_this21,_this21.wrap(n),i);});}return everyWhere;}()},{key:'flatMap',value:function(){function flatMap(fn){var _this22=this;var nodes=this.getNodesInternal().map(function(n,i){return fn.call(_this22,_this22.wrap(n),i);});var flattened=(0,_flatten2['default'])(nodes,true);var uniques=(0,_uniq2['default'])(flattened);var compacted=(0,_compact2['default'])(uniques);return this.wrap(compacted);}return flatMap;}()},{key:'findWhere',value:function(){function findWhere(predicate){var _this23=this;return findWhereUnwrapped(this,function(n){return predicate(_this23.wrap(n));});}return findWhere;}()},{key:'get',value:function(){function get(index){return(0,_Utils.getAdapter)(this[OPTIONS]).nodeToElement(this.getNodesInternal()[index]);}return get;}()},{key:'at',value:function(){function at(index){return this.wrap(this.getNodesInternal()[index]);}return at;}()},{key:'first',value:function(){function first(){return this.at(0);}return first;}()},{key:'last',value:function(){function last(){return this.at(this.length-1);}return last;}()},{key:'isEmpty',value:function(){function isEmpty(){console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');return!this.exists();}return isEmpty;}()},{key:'exists',value:function(){function exists(){return this.length>0;}return exists;}()},{key:'single',value:function(){function single(name,fn){var fnName=typeof name==='string'?name:'unknown';var callback=typeof fn==='function'?fn:name;if(this.length!==1){throw new Error("Method \u201C"+fnName+"\u201D is only meant to be run on a single node. "+String(this.length)+' found instead.');}return callback.call(this,this.getNodeInternal());}return single;}()},{key:'wrap',value:function(){function wrap(node){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this[ROOT];if(node instanceof ShallowWrapper){return node;}for(var _len3=arguments.length,args=Array(_len3>2?_len3-2:0),_key3=2;_key3<_len3;_key3++){args[_key3-2]=arguments[_key3];}return new(Function.prototype.bind.apply(ShallowWrapper,[null].concat([node,root],args)))();}return wrap;}()},{key:'debug',value:function(){function debug(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return(0,_Debug.debugNodes)(this.getNodesInternal(),options);}return debug;}()},{key:'tap',value:function(){function tap(intercepter){intercepter(this);return this;}return tap;}()},{key:'dive',value:function(){function dive(){var _this24=this;var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);var name='dive';return this.single(name,function(n){if(n&&n.nodeType==='host'){throw new TypeError('ShallowWrapper::'+name+'() can not be called on Host Components');}var el=(0,_Utils.getAdapter)(_this24[OPTIONS]).nodeToElement(n);if(!(0,_Utils.isCustomComponentElement)(el,adapter)){throw new TypeError('ShallowWrapper::'+name+'() can only be called on components');}return _this24.wrap(el,null,(0,_object2['default'])({},_this24[OPTIONS],options));});}return dive;}()},{key:'hostNodes',value:function(){function hostNodes(){return this.filterWhere(function(n){return typeof n.type()==='string';});}return hostNodes;}()}]);return ShallowWrapper;}();if(_Utils.ITERATOR_SYMBOL){Object.defineProperty(ShallowWrapper.prototype,_Utils.ITERATOR_SYMBOL,{configurable:true,value:function(){function iterator(){var iter=this[NODES][_Utils.ITERATOR_SYMBOL]();var adapter=(0,_Utils.getAdapter)(this[OPTIONS]);return{next:function(){function next(){var next=iter.next();if(next.done){return{done:true};}return{done:false,value:adapter.nodeToElement(next.value)};}return next;}()};}return iterator;}()});}function privateWarning(prop,extraMessage){Object.defineProperty(ShallowWrapper.prototype,prop,{get:function(){function get(){throw new Error('\n        Attempted to access ShallowWrapper::'+String(prop)+', which was previously a private property on\n        Enzyme ShallowWrapper instances, but is no longer and should not be relied upon.\n        '+String(extraMessage)+'\n      ');}return get;}(),enumerable:false,configurable:false});}privateWarning('node','Consider using the getElement() method instead.');privateWarning('nodes','Consider using the getElements() method instead.');privateWarning('renderer','');privateWarning('options','');privateWarning('complexSelector','');exports['default']=ShallowWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,