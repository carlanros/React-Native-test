{"version":3,"sources":["_equalByTag.js"],"names":["Symbol","require","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","name","message","convert","isPartial","size","stacked","get","set","result","call","module","exports"],"mappings":"AAAA,GAAIA,QAASC,QAAQ,WAAR,CAAb,CACIC,WAAaD,QAAQ,eAAR,CADjB,CAEIE,GAAKF,QAAQ,MAAR,CAFT,CAGIG,YAAcH,QAAQ,gBAAR,CAHlB,CAIII,WAAaJ,QAAQ,eAAR,CAJjB,CAKIK,WAAaL,QAAQ,eAAR,CALjB,CAQA,GAAIM,sBAAuB,CAA3B,CACIC,uBAAyB,CAD7B,CAIA,GAAIC,SAAU,kBAAd,CACIC,QAAU,eADd,CAEIC,SAAW,gBAFf,CAGIC,OAAS,cAHb,CAIIC,UAAY,iBAJhB,CAKIC,UAAY,iBALhB,CAMIC,OAAS,cANb,CAOIC,UAAY,iBAPhB,CAQIC,UAAY,iBARhB,CAUA,GAAIC,gBAAiB,sBAArB,CACIC,YAAc,mBADlB,CAIA,GAAIC,aAAcpB,kCAASA,OAAOqB,SAAhB,eAA4BC,SAA9C,CACIC,cAAgBH,YAAcA,YAAYI,OAA1B,CAAoCF,SADxD,CAoBA,QAASG,WAAT,CAAoBC,MAApB,CAA4BC,KAA5B,CAAmCC,GAAnC,CAAwCC,OAAxC,CAAiDC,UAAjD,CAA6DC,SAA7D,CAAwEC,KAAxE,CAA+E,CAC7E,OAAQJ,GAAR,EACE,IAAKT,YAAL,CACE,GAAKO,OAAOO,UAAP,EAAqBN,MAAMM,UAA5B,EACCP,OAAOQ,UAAP,EAAqBP,MAAMO,UADhC,CAC6C,CAC3C,MAAO,MAAP,CACD,CACDR,OAASA,OAAOS,MAAhB,CACAR,MAAQA,MAAMQ,MAAd,CAEF,IAAKjB,eAAL,CACE,GAAKQ,OAAOO,UAAP,EAAqBN,MAAMM,UAA5B,EACA,CAACF,UAAU,GAAI7B,WAAJ,CAAewB,MAAf,CAAV,CAAkC,GAAIxB,WAAJ,CAAeyB,KAAf,CAAlC,CADL,CAC+D,CAC7D,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CAEF,IAAKlB,QAAL,CACA,IAAKC,QAAL,CACA,IAAKG,UAAL,CAGE,MAAOV,IAAG,CAACuB,MAAJ,CAAY,CAACC,KAAb,CAAP,CAEF,IAAKhB,SAAL,CACE,MAAOe,QAAOU,IAAP,EAAeT,MAAMS,IAArB,EAA6BV,OAAOW,OAAP,EAAkBV,MAAMU,OAA5D,CAEF,IAAKvB,UAAL,CACA,IAAKE,UAAL,CAIE,MAAOU,SAAWC,MAAQ,EAA1B,CAEF,IAAKf,OAAL,CACE,GAAI0B,SAAUjC,UAAd,CAEF,IAAKU,OAAL,CACE,GAAIwB,WAAYV,QAAUtB,oBAA1B,CACA+B,UAAYA,QAAUhC,UAAtB,EAEA,GAAIoB,OAAOc,IAAP,EAAeb,MAAMa,IAArB,EAA6B,CAACD,SAAlC,CAA6C,CAC3C,MAAO,MAAP,CACD,CAED,GAAIE,SAAUT,MAAMU,GAAN,CAAUhB,MAAV,CAAd,CACA,GAAIe,OAAJ,CAAa,CACX,MAAOA,UAAWd,KAAlB,CACD,CACDE,SAAWrB,sBAAX,CAGAwB,MAAMW,GAAN,CAAUjB,MAAV,CAAkBC,KAAlB,EACA,GAAIiB,QAASxC,YAAYkC,QAAQZ,MAAR,CAAZ,CAA6BY,QAAQX,KAAR,CAA7B,CAA6CE,OAA7C,CAAsDC,UAAtD,CAAkEC,SAAlE,CAA6EC,KAA7E,CAAb,CACAA,MAAM,QAAN,EAAgBN,MAAhB,EACA,MAAOkB,OAAP,CAEF,IAAK3B,UAAL,CACE,GAAIM,aAAJ,CAAmB,CACjB,MAAOA,eAAcsB,IAAd,CAAmBnB,MAAnB,GAA8BH,cAAcsB,IAAd,CAAmBlB,KAAnB,CAArC,CACD,CA3DL,CA6DA,MAAO,MAAP,CACD,CAEDmB,OAAOC,OAAP,CAAiBtB,UAAjB","file":"_equalByTag.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"]}