0127b3393ecad3dddaa790a176d9b5c7
/** @license React v16.2.0
 * react.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */'use strict';if(process.env.NODE_ENV!=="production"){(function(){'use strict';var _assign=require('object-assign');var emptyObject=require('fbjs/lib/emptyObject');var invariant=require('fbjs/lib/invariant');var warning=require('fbjs/lib/warning');var emptyFunction=require('fbjs/lib/emptyFunction');var checkPropTypes=require('prop-types/checkPropTypes');var ReactVersion='16.2.0';var hasSymbol=typeof Symbol==='function'&&Symbol['for'];var REACT_ELEMENT_TYPE=hasSymbol?Symbol['for']('react.element'):0xeac7;var REACT_CALL_TYPE=hasSymbol?Symbol['for']('react.call'):0xeac8;var REACT_RETURN_TYPE=hasSymbol?Symbol['for']('react.return'):0xeac9;var REACT_PORTAL_TYPE=hasSymbol?Symbol['for']('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol['for']('react.fragment'):0xeacb;var MAYBE_ITERATOR_SYMBOL=typeof Symbol==='function'&&(typeof Symbol==='function'?Symbol.iterator:'@@iterator');var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||typeof maybeIterable==='undefined'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var lowPriorityWarning=function lowPriorityWarning(){};{var printWarning=function printWarning(format){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.warn(message);}try{throw new Error(message);}catch(x){}};lowPriorityWarning=function lowPriorityWarning(condition,format){if(format===undefined){throw new Error('`warning(condition, format, ...args)` requires a warning '+'message argument');}if(!condition){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}printWarning.apply(undefined,[format].concat(args));}};}var lowPriorityWarning$1=lowPriorityWarning;var didWarnStateUpdateForUnmountedComponent={};function warnNoop(publicInstance,callerName){{var constructor=publicInstance.constructor;var componentName=constructor&&(constructor.displayName||constructor.name)||'ReactClass';var warningKey=componentName+'.'+callerName;if(didWarnStateUpdateForUnmountedComponent[warningKey]){return;}warning(false,'%s(...): Can only update a mounted or mounting component. '+'This usually means you called %s() on an unmounted component. '+'This is a no-op.\n\nPlease check the code for the %s component.',callerName,callerName,componentName);didWarnStateUpdateForUnmountedComponent[warningKey]=true;}}var ReactNoopUpdateQueue={isMounted:function isMounted(publicInstance){return false;},enqueueForceUpdate:function enqueueForceUpdate(publicInstance,callback,callerName){warnNoop(publicInstance,'forceUpdate');},enqueueReplaceState:function enqueueReplaceState(publicInstance,completeState,callback,callerName){warnNoop(publicInstance,'replaceState');},enqueueSetState:function enqueueSetState(publicInstance,partialState,callback,callerName){warnNoop(publicInstance,'setState');}};function Component(props,context,updater){this.props=props;this.context=context;this.refs=emptyObject;this.updater=updater||ReactNoopUpdateQueue;}Component.prototype.isReactComponent={};Component.prototype.setState=function(partialState,callback){!(typeof partialState==='object'||typeof partialState==='function'||partialState==null)?invariant(false,'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'):void 0;this.updater.enqueueSetState(this,partialState,callback,'setState');};Component.prototype.forceUpdate=function(callback){this.updater.enqueueForceUpdate(this,callback,'forceUpdate');};{var deprecatedAPIs={isMounted:['isMounted','Instead, make sure to clean up subscriptions and pending requests in '+'componentWillUnmount to prevent memory leaks.'],replaceState:['replaceState','Refactor your code to use setState instead (see '+'https://github.com/facebook/react/issues/3236).']};var defineDeprecationWarning=function defineDeprecationWarning(methodName,info){Object.defineProperty(Component.prototype,methodName,{get:function get(){lowPriorityWarning$1(false,'%s(...) is deprecated in plain JavaScript React classes. %s',info[0],info[1]);return undefined;}});};for(var fnName in deprecatedAPIs){if(deprecatedAPIs.hasOwnProperty(fnName)){defineDeprecationWarning(fnName,deprecatedAPIs[fnName]);}}}function PureComponent(props,context,updater){this.props=props;this.context=context;this.refs=emptyObject;this.updater=updater||ReactNoopUpdateQueue;}function ComponentDummy(){}ComponentDummy.prototype=Component.prototype;var pureComponentPrototype=PureComponent.prototype=new ComponentDummy();pureComponentPrototype.constructor=PureComponent;_assign(pureComponentPrototype,Component.prototype);pureComponentPrototype.isPureReactComponent=true;function AsyncComponent(props,context,updater){this.props=props;this.context=context;this.refs=emptyObject;this.updater=updater||ReactNoopUpdateQueue;}var asyncComponentPrototype=AsyncComponent.prototype=new ComponentDummy();asyncComponentPrototype.constructor=AsyncComponent;_assign(asyncComponentPrototype,Component.prototype);asyncComponentPrototype.unstable_isAsyncReactComponent=true;asyncComponentPrototype.render=function(){return this.props.children;};var ReactCurrentOwner={current:null};var hasOwnProperty=Object.prototype.hasOwnProperty;var RESERVED_PROPS={key:true,ref:true,__self:true,__source:true};var specialPropKeyWarningShown;var specialPropRefWarningShown;function hasValidRef(config){{if(hasOwnProperty.call(config,'ref')){var getter=Object.getOwnPropertyDescriptor(config,'ref').get;if(getter&&getter.isReactWarning){return false;}}}return config.ref!==undefined;}function hasValidKey(config){{if(hasOwnProperty.call(config,'key')){var getter=Object.getOwnPropertyDescriptor(config,'key').get;if(getter&&getter.isReactWarning){return false;}}}return config.key!==undefined;}function defineKeyPropWarningGetter(props,displayName){var warnAboutAccessingKey=function warnAboutAccessingKey(){if(!specialPropKeyWarningShown){specialPropKeyWarningShown=true;warning(false,'%s: `key` is not a prop. Trying to access it will result '+'in `undefined` being returned. If you need to access the same '+'value within the child component, you should pass it as a different '+'prop. (https://fb.me/react-special-props)',displayName);}};warnAboutAccessingKey.isReactWarning=true;Object.defineProperty(props,'key',{get:warnAboutAccessingKey,configurable:true});}function defineRefPropWarningGetter(props,displayName){var warnAboutAccessingRef=function warnAboutAccessingRef(){if(!specialPropRefWarningShown){specialPropRefWarningShown=true;warning(false,'%s: `ref` is not a prop. Trying to access it will result '+'in `undefined` being returned. If you need to access the same '+'value within the child component, you should pass it as a different '+'prop. (https://fb.me/react-special-props)',displayName);}};warnAboutAccessingRef.isReactWarning=true;Object.defineProperty(props,'ref',{get:warnAboutAccessingRef,configurable:true});}var ReactElement=function ReactElement(type,key,ref,self,source,owner,props){var element={$$typeof:REACT_ELEMENT_TYPE,type:type,key:key,ref:ref,props:props,_owner:owner};{element._store={};Object.defineProperty(element._store,'validated',{configurable:false,enumerable:false,writable:true,value:false});Object.defineProperty(element,'_self',{configurable:false,enumerable:false,writable:false,value:self});Object.defineProperty(element,'_source',{configurable:false,enumerable:false,writable:false,value:source});if(Object.freeze){Object.freeze(element.props);Object.freeze(element);}}return element;};function createElement(type,config,children){var propName;var props={};var key=null;var ref=null;var self=null;var source=null;if(config!=null){if(hasValidRef(config)){ref=config.ref;}if(hasValidKey(config)){key=''+config.key;}self=config.__self===undefined?null:config.__self;source=config.__source===undefined?null:config.__source;for(propName in config){if(hasOwnProperty.call(config,propName)&&!RESERVED_PROPS.hasOwnProperty(propName)){props[propName]=config[propName];}}}var childrenLength=arguments.length-2;if(childrenLength===1){props.children=children;}else if(childrenLength>1){var childArray=Array(childrenLength);for(var i=0;i<childrenLength;i++){childArray[i]=arguments[i+2];}{if(Object.freeze){Object.freeze(childArray);}}props.children=childArray;}if(type&&type.defaultProps){var defaultProps=type.defaultProps;for(propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}}{if(key||ref){if(typeof props.$$typeof==='undefined'||props.$$typeof!==REACT_ELEMENT_TYPE){var displayName=typeof type==='function'?type.displayName||type.name||'Unknown':type;if(key){defineKeyPropWarningGetter(props,displayName);}if(ref){defineRefPropWarningGetter(props,displayName);}}}}return ReactElement(type,key,ref,self,source,ReactCurrentOwner.current,props);}function cloneAndReplaceKey(oldElement,newKey){var newElement=ReactElement(oldElement.type,newKey,oldElement.ref,oldElement._self,oldElement._source,oldElement._owner,oldElement.props);return newElement;}function cloneElement(element,config,children){var propName;var props=_assign({},element.props);var key=element.key;var ref=element.ref;var self=element._self;var source=element._source;var owner=element._owner;if(config!=null){if(hasValidRef(config)){ref=config.ref;owner=ReactCurrentOwner.current;}if(hasValidKey(config)){key=''+config.key;}var defaultProps;if(element.type&&element.type.defaultProps){defaultProps=element.type.defaultProps;}for(propName in config){if(hasOwnProperty.call(config,propName)&&!RESERVED_PROPS.hasOwnProperty(propName)){if(config[propName]===undefined&&defaultProps!==undefined){props[propName]=defaultProps[propName];}else{props[propName]=config[propName];}}}}var childrenLength=arguments.length-2;if(childrenLength===1){props.children=children;}else if(childrenLength>1){var childArray=Array(childrenLength);for(var i=0;i<childrenLength;i++){childArray[i]=arguments[i+2];}props.children=childArray;}return ReactElement(element.type,key,ref,self,source,owner,props);}function isValidElement(object){return typeof object==='object'&&object!==null&&object.$$typeof===REACT_ELEMENT_TYPE;}var ReactDebugCurrentFrame={};{ReactDebugCurrentFrame.getCurrentStack=null;ReactDebugCurrentFrame.getStackAddendum=function(){var impl=ReactDebugCurrentFrame.getCurrentStack;if(impl){return impl();}return null;};}var SEPARATOR='.';var SUBSEPARATOR=':';function escape(key){var escapeRegex=/[=:]/g;var escaperLookup={'=':'=0',':':'=2'};var escapedString=(''+key).replace(escapeRegex,function(match){return escaperLookup[match];});return'$'+escapedString;}var didWarnAboutMaps=false;var userProvidedKeyEscapeRegex=/\/+/g;function escapeUserProvidedKey(text){return(''+text).replace(userProvidedKeyEscapeRegex,'$&/');}var POOL_SIZE=10;var traverseContextPool=[];function getPooledTraverseContext(mapResult,keyPrefix,mapFunction,mapContext){if(traverseContextPool.length){var traverseContext=traverseContextPool.pop();traverseContext.result=mapResult;traverseContext.keyPrefix=keyPrefix;traverseContext.func=mapFunction;traverseContext.context=mapContext;traverseContext.count=0;return traverseContext;}else{return{result:mapResult,keyPrefix:keyPrefix,func:mapFunction,context:mapContext,count:0};}}function releaseTraverseContext(traverseContext){traverseContext.result=null;traverseContext.keyPrefix=null;traverseContext.func=null;traverseContext.context=null;traverseContext.count=0;if(traverseContextPool.length<POOL_SIZE){traverseContextPool.push(traverseContext);}}function traverseAllChildrenImpl(children,nameSoFar,callback,traverseContext){var type=typeof children;if(type==='undefined'||type==='boolean'){children=null;}var invokeCallback=false;if(children===null){invokeCallback=true;}else{switch(type){case'string':case'number':invokeCallback=true;break;case'object':switch(children.$$typeof){case REACT_ELEMENT_TYPE:case REACT_CALL_TYPE:case REACT_RETURN_TYPE:case REACT_PORTAL_TYPE:invokeCallback=true;}}}if(invokeCallback){callback(traverseContext,children,nameSoFar===''?SEPARATOR+getComponentKey(children,0):nameSoFar);return 1;}var child;var nextName;var subtreeCount=0;var nextNamePrefix=nameSoFar===''?SEPARATOR:nameSoFar+SUBSEPARATOR;if(Array.isArray(children)){for(var i=0;i<children.length;i++){child=children[i];nextName=nextNamePrefix+getComponentKey(child,i);subtreeCount+=traverseAllChildrenImpl(child,nextName,callback,traverseContext);}}else{var iteratorFn=getIteratorFn(children);if(typeof iteratorFn==='function'){{if(iteratorFn===children.entries){warning(didWarnAboutMaps,'Using Maps as children is unsupported and will likely yield '+'unexpected results. Convert it to a sequence/iterable of keyed '+'ReactElements instead.%s',ReactDebugCurrentFrame.getStackAddendum());didWarnAboutMaps=true;}}var iterator=iteratorFn.call(children);var step;var ii=0;while(!(step=iterator.next()).done){child=step.value;nextName=nextNamePrefix+getComponentKey(child,ii++);subtreeCount+=traverseAllChildrenImpl(child,nextName,callback,traverseContext);}}else if(type==='object'){var addendum='';{addendum=' If you meant to render a collection of children, use an array '+'instead.'+ReactDebugCurrentFrame.getStackAddendum();}var childrenString=''+children;invariant(false,'Objects are not valid as a React child (found: %s).%s',childrenString==='[object Object]'?'object with keys {'+Object.keys(children).join(', ')+'}':childrenString,addendum);}}return subtreeCount;}function traverseAllChildren(children,callback,traverseContext){if(children==null){return 0;}return traverseAllChildrenImpl(children,'',callback,traverseContext);}function getComponentKey(component,index){if(typeof component==='object'&&component!==null&&component.key!=null){return escape(component.key);}return index.toString(36);}function forEachSingleChild(bookKeeping,child,name){var func=bookKeeping.func,context=bookKeeping.context;func.call(context,child,bookKeeping.count++);}function forEachChildren(children,forEachFunc,forEachContext){if(children==null){return children;}var traverseContext=getPooledTraverseContext(null,null,forEachFunc,forEachContext);traverseAllChildren(children,forEachSingleChild,traverseContext);releaseTraverseContext(traverseContext);}function mapSingleChildIntoContext(bookKeeping,child,childKey){var result=bookKeeping.result,keyPrefix=bookKeeping.keyPrefix,func=bookKeeping.func,context=bookKeeping.context;var mappedChild=func.call(context,child,bookKeeping.count++);if(Array.isArray(mappedChild)){mapIntoWithKeyPrefixInternal(mappedChild,result,childKey,emptyFunction.thatReturnsArgument);}else if(mappedChild!=null){if(isValidElement(mappedChild)){mappedChild=cloneAndReplaceKey(mappedChild,keyPrefix+(mappedChild.key&&(!child||child.key!==mappedChild.key)?escapeUserProvidedKey(mappedChild.key)+'/':'')+childKey);}result.push(mappedChild);}}function mapIntoWithKeyPrefixInternal(children,array,prefix,func,context){var escapedPrefix='';if(prefix!=null){escapedPrefix=escapeUserProvidedKey(prefix)+'/';}var traverseContext=getPooledTraverseContext(array,escapedPrefix,func,context);traverseAllChildren(children,mapSingleChildIntoContext,traverseContext);releaseTraverseContext(traverseContext);}function mapChildren(children,func,context){if(children==null){return children;}var result=[];mapIntoWithKeyPrefixInternal(children,result,null,func,context);return result;}function countChildren(children,context){return traverseAllChildren(children,emptyFunction.thatReturnsNull,null);}function toArray(children){var result=[];mapIntoWithKeyPrefixInternal(children,result,null,emptyFunction.thatReturnsArgument);return result;}function onlyChild(children){!isValidElement(children)?invariant(false,'React.Children.only expected to receive a single React element child.'):void 0;return children;}var describeComponentFrame=function describeComponentFrame(name,source,ownerName){return'\n    in '+(name||'Unknown')+(source?' (at '+source.fileName.replace(/^.*[\\\/]/,'')+':'+source.lineNumber+')':ownerName?' (created by '+ownerName+')':'');};function getComponentName(fiber){var type=fiber.type;if(typeof type==='string'){return type;}if(typeof type==='function'){return type.displayName||type.name;}return null;}{var currentlyValidatingElement=null;var propTypesMisspellWarningShown=false;var getDisplayName=function getDisplayName(element){if(element==null){return'#empty';}else if(typeof element==='string'||typeof element==='number'){return'#text';}else if(typeof element.type==='string'){return element.type;}else if(element.type===REACT_FRAGMENT_TYPE){return'React.Fragment';}else{return element.type.displayName||element.type.name||'Unknown';}};var getStackAddendum=function getStackAddendum(){var stack='';if(currentlyValidatingElement){var name=getDisplayName(currentlyValidatingElement);var owner=currentlyValidatingElement._owner;stack+=describeComponentFrame(name,currentlyValidatingElement._source,owner&&getComponentName(owner));}stack+=ReactDebugCurrentFrame.getStackAddendum()||'';return stack;};var VALID_FRAGMENT_PROPS=new Map([['children',true],['key',true]]);}function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var name=getComponentName(ReactCurrentOwner.current);if(name){return'\n\nCheck the render method of `'+name+'`.';}}return'';}function getSourceInfoErrorAddendum(elementProps){if(elementProps!==null&&elementProps!==undefined&&elementProps.__source!==undefined){var source=elementProps.__source;var fileName=source.fileName.replace(/^.*[\\\/]/,'');var lineNumber=source.lineNumber;return'\n\nCheck your code at '+fileName+':'+lineNumber+'.';}return'';}var ownerHasKeyUseWarning={};function getCurrentComponentErrorInfo(parentType){var info=getDeclarationErrorAddendum();if(!info){var parentName=typeof parentType==='string'?parentType:parentType.displayName||parentType.name;if(parentName){info='\n\nCheck the top-level render call using <'+parentName+'>.';}}return info;}function validateExplicitKey(element,parentType){if(!element._store||element._store.validated||element.key!=null){return;}element._store.validated=true;var currentComponentErrorInfo=getCurrentComponentErrorInfo(parentType);if(ownerHasKeyUseWarning[currentComponentErrorInfo]){return;}ownerHasKeyUseWarning[currentComponentErrorInfo]=true;var childOwner='';if(element&&element._owner&&element._owner!==ReactCurrentOwner.current){childOwner=' It was passed a child from '+getComponentName(element._owner)+'.';}currentlyValidatingElement=element;{warning(false,'Each child in an array or iterator should have a unique "key" prop.'+'%s%s See https://fb.me/react-warning-keys for more information.%s',currentComponentErrorInfo,childOwner,getStackAddendum());}currentlyValidatingElement=null;}function validateChildKeys(node,parentType){if(typeof node!=='object'){return;}if(Array.isArray(node)){for(var i=0;i<node.length;i++){var child=node[i];if(isValidElement(child)){validateExplicitKey(child,parentType);}}}else if(isValidElement(node)){if(node._store){node._store.validated=true;}}else if(node){var iteratorFn=getIteratorFn(node);if(typeof iteratorFn==='function'){if(iteratorFn!==node.entries){var iterator=iteratorFn.call(node);var step;while(!(step=iterator.next()).done){if(isValidElement(step.value)){validateExplicitKey(step.value,parentType);}}}}}}function validatePropTypes(element){var componentClass=element.type;if(typeof componentClass!=='function'){return;}var name=componentClass.displayName||componentClass.name;var propTypes=componentClass.propTypes;if(propTypes){currentlyValidatingElement=element;checkPropTypes(propTypes,element.props,'prop',name,getStackAddendum);currentlyValidatingElement=null;}else if(componentClass.PropTypes!==undefined&&!propTypesMisspellWarningShown){propTypesMisspellWarningShown=true;warning(false,'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',name||'Unknown');}if(typeof componentClass.getDefaultProps==='function'){warning(componentClass.getDefaultProps.isReactClassApproved,'getDefaultProps is only used on classic React.createClass '+'definitions. Use a static property named `defaultProps` instead.');}}function validateFragmentProps(fragment){currentlyValidatingElement=fragment;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.keys(fragment.props)[typeof Symbol==='function'?Symbol.iterator:'@@iterator'](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var key=_step.value;if(!VALID_FRAGMENT_PROPS.has(key)){warning(false,'Invalid prop `%s` supplied to `React.Fragment`. '+'React.Fragment can only have `key` and `children` props.%s',key,getStackAddendum());break;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator['return']){_iterator['return']();}}finally{if(_didIteratorError){throw _iteratorError;}}}if(fragment.ref!==null){warning(false,'Invalid attribute `ref` supplied to `React.Fragment`.%s',getStackAddendum());}currentlyValidatingElement=null;}function createElementWithValidation(type,props,children){var validType=typeof type==='string'||typeof type==='function'||typeof type==='symbol'||typeof type==='number';if(!validType){var info='';if(type===undefined||typeof type==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and named imports.";}var sourceInfo=getSourceInfoErrorAddendum(props);if(sourceInfo){info+=sourceInfo;}else{info+=getDeclarationErrorAddendum();}info+=getStackAddendum()||'';warning(false,'React.createElement: type is invalid -- expected a string (for '+'built-in components) or a class/function (for composite '+'components) but got: %s.%s',type==null?type:typeof type,info);}var element=createElement.apply(this,arguments);if(element==null){return element;}if(validType){for(var i=2;i<arguments.length;i++){validateChildKeys(arguments[i],type);}}if(typeof type==='symbol'&&type===REACT_FRAGMENT_TYPE){validateFragmentProps(element);}else{validatePropTypes(element);}return element;}function createFactoryWithValidation(type){var validatedFactory=createElementWithValidation.bind(null,type);validatedFactory.type=type;{Object.defineProperty(validatedFactory,'type',{enumerable:false,get:function get(){lowPriorityWarning$1(false,'Factory.type is deprecated. Access the class directly '+'before passing it to createFactory.');Object.defineProperty(this,'type',{value:type});return type;}});}return validatedFactory;}function cloneElementWithValidation(element,props,children){var newElement=cloneElement.apply(this,arguments);for(var i=2;i<arguments.length;i++){validateChildKeys(arguments[i],newElement.type);}validatePropTypes(newElement);return newElement;}var React={Children:{map:mapChildren,forEach:forEachChildren,count:countChildren,toArray:toArray,only:onlyChild},Component:Component,PureComponent:PureComponent,unstable_AsyncComponent:AsyncComponent,Fragment:REACT_FRAGMENT_TYPE,createElement:createElementWithValidation,cloneElement:cloneElementWithValidation,createFactory:createFactoryWithValidation,isValidElement:isValidElement,version:ReactVersion,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:ReactCurrentOwner,assign:_assign}};{_assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,{ReactDebugCurrentFrame:ReactDebugCurrentFrame,ReactComponentTreeHook:{}});}var React$2=Object.freeze({default:React});var React$3=React$2&&React||React$2;var react=React$3['default']?React$3['default']:React$3;module.exports=react;})();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,