{"version":3,"sources":["toNumber.js"],"names":["isObject","require","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","other","valueOf","replace","isBinary","test","slice","module","exports"],"mappings":"AAAA,GAAIA,UAAWC,QAAQ,YAAR,CAAf,CACIC,SAAWD,QAAQ,YAAR,CADf,CAIA,GAAIE,KAAM,EAAI,CAAd,CAGA,GAAIC,QAAS,YAAb,CAGA,GAAIC,YAAa,oBAAjB,CAGA,GAAIC,YAAa,YAAjB,CAGA,GAAIC,WAAY,aAAhB,CAGA,GAAIC,cAAeC,QAAnB,CAyBA,QAASC,SAAT,CAAkBC,KAAlB,CAAyB,CACvB,GAAI,MAAOA,MAAP,EAAgB,QAApB,CAA8B,CAC5B,MAAOA,MAAP,CACD,CACD,GAAIT,SAASS,KAAT,CAAJ,CAAqB,CACnB,MAAOR,IAAP,CACD,CACD,GAAIH,SAASW,KAAT,CAAJ,CAAqB,CACnB,GAAIC,OAAQ,MAAOD,OAAME,OAAb,EAAwB,UAAxB,CAAqCF,MAAME,OAAN,EAArC,CAAuDF,KAAnE,CACAA,MAAQX,SAASY,KAAT,EAAmBA,MAAQ,EAA3B,CAAiCA,KAAzC,CACD,CACD,GAAI,MAAOD,MAAP,EAAgB,QAApB,CAA8B,CAC5B,MAAOA,SAAU,CAAV,CAAcA,KAAd,CAAsB,CAACA,KAA9B,CACD,CACDA,MAAQA,MAAMG,OAAN,CAAcV,MAAd,CAAsB,EAAtB,CAAR,CACA,GAAIW,UAAWT,WAAWU,IAAX,CAAgBL,KAAhB,CAAf,CACA,MAAQI,WAAYR,UAAUS,IAAV,CAAeL,KAAf,CAAb,CACHH,aAAaG,MAAMM,KAAN,CAAY,CAAZ,CAAb,CAA6BF,SAAW,CAAX,CAAe,CAA5C,CADG,CAEFV,WAAWW,IAAX,CAAgBL,KAAhB,EAAyBR,GAAzB,CAA+B,CAACQ,KAFrC,CAGD,CAEDO,OAAOC,OAAP,CAAiBT,QAAjB","file":"toNumber.js","sourcesContent":["var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"]}