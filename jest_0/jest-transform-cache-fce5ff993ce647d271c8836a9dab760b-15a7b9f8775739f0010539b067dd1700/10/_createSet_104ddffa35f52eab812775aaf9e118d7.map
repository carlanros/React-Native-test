{"version":3,"sources":["_createSet.js"],"names":["Set","require","noop","setToArray","INFINITY","createSet","values","module","exports"],"mappings":"AAAA,GAAIA,KAAMC,QAAQ,QAAR,CAAV,CACIC,KAAOD,QAAQ,QAAR,CADX,CAEIE,WAAaF,QAAQ,eAAR,CAFjB,CAKA,GAAIG,UAAW,EAAI,CAAnB,CASA,GAAIC,WAAY,EAAEL,KAAQ,EAAIG,WAAW,GAAIH,IAAJ,CAAQ,EAAE,CAAC,CAAH,CAAR,CAAX,EAA2B,CAA3B,CAAL,EAAuCI,QAAhD,EAA4DF,IAA5D,CAAmE,SAASI,MAAT,CAAiB,CAClG,MAAO,IAAIN,IAAJ,CAAQM,MAAR,CAAP,CACD,CAFD,CAIAC,OAAOC,OAAP,CAAiBH,SAAjB","file":"_createSet.js","sourcesContent":["var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n"]}