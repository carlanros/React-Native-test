{"version":3,"sources":["_createWrap.js"],"names":["baseSetData","require","createBind","createCurry","createHybrid","createPartial","getData","mergeData","setData","setWrapToString","toInteger","FUNC_ERROR_TEXT","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","nativeMax","Math","max","createWrap","func","bitmask","thisArg","partials","holders","argPos","ary","arity","isBindKey","TypeError","length","undefined","partialsRight","holdersRight","data","newData","result","apply","setter","module","exports"],"mappings":"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","file":"_createWrap.js","sourcesContent":["var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n"]}