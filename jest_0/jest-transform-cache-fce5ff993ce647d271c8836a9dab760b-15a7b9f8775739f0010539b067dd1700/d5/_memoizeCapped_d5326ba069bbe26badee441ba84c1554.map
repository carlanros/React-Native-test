{"version":3,"sources":["_memoizeCapped.js"],"names":["memoize","require","MAX_MEMOIZE_SIZE","memoizeCapped","func","result","key","cache","size","clear","module","exports"],"mappings":"AAAA,GAAIA,SAAUC,QAAQ,WAAR,CAAd,CAGA,GAAIC,kBAAmB,GAAvB,CAUA,QAASC,cAAT,CAAuBC,IAAvB,CAA6B,CAC3B,GAAIC,QAASL,QAAQI,IAAR,CAAc,SAASE,GAAT,CAAc,CACvC,GAAIC,MAAMC,IAAN,GAAeN,gBAAnB,CAAqC,CACnCK,MAAME,KAAN,GACD,CACD,MAAOH,IAAP,CACD,CALY,CAAb,CAOA,GAAIC,OAAQF,OAAOE,KAAnB,CACA,MAAOF,OAAP,CACD,CAEDK,OAAOC,OAAP,CAAiBR,aAAjB","file":"_memoizeCapped.js","sourcesContent":["var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"]}