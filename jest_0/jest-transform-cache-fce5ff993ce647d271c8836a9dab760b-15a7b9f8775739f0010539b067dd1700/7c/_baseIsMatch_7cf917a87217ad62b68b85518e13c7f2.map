{"version":3,"sources":["_baseIsMatch.js"],"names":["Stack","require","baseIsEqual","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseIsMatch","object","source","matchData","customizer","index","length","noCustomizer","Object","data","key","objValue","srcValue","undefined","stack","result","module","exports"],"mappings":"AAAA,GAAIA,OAAQC,QAAQ,UAAR,CAAZ,CACIC,YAAcD,QAAQ,gBAAR,CADlB,CAIA,GAAIE,sBAAuB,CAA3B,CACIC,uBAAyB,CAD7B,CAaA,QAASC,YAAT,CAAqBC,MAArB,CAA6BC,MAA7B,CAAqCC,SAArC,CAAgDC,UAAhD,CAA4D,CAC1D,GAAIC,OAAQF,UAAUG,MAAtB,CACIA,OAASD,KADb,CAEIE,aAAe,CAACH,UAFpB,CAIA,GAAIH,QAAU,IAAd,CAAoB,CAClB,MAAO,CAACK,MAAR,CACD,CACDL,OAASO,OAAOP,MAAP,CAAT,CACA,MAAOI,OAAP,CAAgB,CACd,GAAII,MAAON,UAAUE,KAAV,CAAX,CACA,GAAKE,cAAgBE,KAAK,CAAL,CAAjB,CACIA,KAAK,CAAL,IAAYR,OAAOQ,KAAK,CAAL,CAAP,CADhB,CAEI,EAAEA,KAAK,CAAL,GAAWR,OAAb,CAFR,CAGM,CACJ,MAAO,MAAP,CACD,CACF,CACD,MAAO,EAAEI,KAAF,CAAUC,MAAjB,CAAyB,CACvBG,KAAON,UAAUE,KAAV,CAAP,CACA,GAAIK,KAAMD,KAAK,CAAL,CAAV,CACIE,SAAWV,OAAOS,GAAP,CADf,CAEIE,SAAWH,KAAK,CAAL,CAFf,CAIA,GAAIF,cAAgBE,KAAK,CAAL,CAApB,CAA6B,CAC3B,GAAIE,WAAaE,SAAb,EAA0B,EAAEH,MAAOT,OAAT,CAA9B,CAAgD,CAC9C,MAAO,MAAP,CACD,CACF,CAJD,IAIO,CACL,GAAIa,OAAQ,GAAInB,MAAJ,EAAZ,CACA,GAAIS,UAAJ,CAAgB,CACd,GAAIW,QAASX,WAAWO,QAAX,CAAqBC,QAArB,CAA+BF,GAA/B,CAAoCT,MAApC,CAA4CC,MAA5C,CAAoDY,KAApD,CAAb,CACD,CACD,GAAI,EAAEC,SAAWF,SAAX,CACEhB,YAAYe,QAAZ,CAAsBD,QAAtB,CAAgCb,qBAAuBC,sBAAvD,CAA+EK,UAA/E,CAA2FU,KAA3F,CADF,CAEEC,MAFJ,CAAJ,CAGO,CACL,MAAO,MAAP,CACD,CACF,CACF,CACD,MAAO,KAAP,CACD,CAEDC,OAAOC,OAAP,CAAiBjB,WAAjB","file":"_baseIsMatch.js","sourcesContent":["var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n"]}