{"version":3,"sources":["_stringToPath.js"],"names":["memoizeCapped","require","rePropName","reEscapeChar","stringToPath","string","result","charCodeAt","push","replace","match","number","quote","subString","module","exports"],"mappings":"AAAA,GAAIA,eAAgBC,QAAQ,kBAAR,CAApB,CAGA,GAAIC,YAAa,kGAAjB,CAGA,GAAIC,cAAe,UAAnB,CASA,GAAIC,cAAeJ,cAAc,SAASK,MAAT,CAAiB,CAChD,GAAIC,QAAS,EAAb,CACA,GAAID,OAAOE,UAAP,CAAkB,CAAlB,IAAyB,EAA7B,CAAyC,CACvCD,OAAOE,IAAP,CAAY,EAAZ,EACD,CACDH,OAAOI,OAAP,CAAeP,UAAf,CAA2B,SAASQ,KAAT,CAAgBC,MAAhB,CAAwBC,KAAxB,CAA+BC,SAA/B,CAA0C,CACnEP,OAAOE,IAAP,CAAYI,MAAQC,UAAUJ,OAAV,CAAkBN,YAAlB,CAAgC,IAAhC,CAAR,CAAiDQ,QAAUD,KAAvE,EACD,CAFD,EAGA,MAAOJ,OAAP,CACD,CATkB,CAAnB,CAWAQ,OAAOC,OAAP,CAAiBX,YAAjB","file":"_stringToPath.js","sourcesContent":["var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n"]}