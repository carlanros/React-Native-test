{"version":3,"sources":["_baseIsEqual.js"],"names":["baseIsEqualDeep","require","isObjectLike","baseIsEqual","value","other","bitmask","customizer","stack","module","exports"],"mappings":"AAAA,GAAIA,iBAAkBC,QAAQ,oBAAR,CAAtB,CACIC,aAAeD,QAAQ,gBAAR,CADnB,CAiBA,QAASE,YAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAmCC,OAAnC,CAA4CC,UAA5C,CAAwDC,KAAxD,CAA+D,CAC7D,GAAIJ,QAAUC,KAAd,CAAqB,CACnB,MAAO,KAAP,CACD,CACD,GAAID,OAAS,IAAT,EAAiBC,OAAS,IAA1B,EAAmC,CAACH,aAAaE,KAAb,CAAD,EAAwB,CAACF,aAAaG,KAAb,CAAhE,CAAsF,CACpF,MAAOD,SAAUA,KAAV,EAAmBC,QAAUA,KAApC,CACD,CACD,MAAOL,iBAAgBI,KAAhB,CAAuBC,KAAvB,CAA8BC,OAA9B,CAAuCC,UAAvC,CAAmDJ,WAAnD,CAAgEK,KAAhE,CAAP,CACD,CAEDC,OAAOC,OAAP,CAAiBP,WAAjB","file":"_baseIsEqual.js","sourcesContent":["var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n"]}