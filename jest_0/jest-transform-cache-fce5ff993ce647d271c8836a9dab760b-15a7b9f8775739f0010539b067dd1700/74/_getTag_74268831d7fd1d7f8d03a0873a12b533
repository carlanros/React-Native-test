abc154ed23cd0c5dd8a5b753dd14c942
var DataView=require('./_DataView'),Map=require('./_Map'),Promise=require('./_Promise'),Set=require('./_Set'),WeakMap=require('./_WeakMap'),baseGetTag=require('./_baseGetTag'),toSource=require('./_toSource');var mapTag='[object Map]',objectTag='[object Object]',promiseTag='[object Promise]',setTag='[object Set]',weakMapTag='[object WeakMap]';var dataViewTag='[object DataView]';var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);var getTag=baseGetTag;if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}module.exports=getTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9nZXRUYWcuanMiXSwibmFtZXMiOlsiRGF0YVZpZXciLCJyZXF1aXJlIiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJiYXNlR2V0VGFnIiwidG9Tb3VyY2UiLCJtYXBUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwidmFsdWUiLCJyZXN1bHQiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJ1bmRlZmluZWQiLCJjdG9yU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsVUFBV0MsUUFBUSxhQUFSLENBQWYsQ0FDSUMsSUFBTUQsUUFBUSxRQUFSLENBRFYsQ0FFSUUsUUFBVUYsUUFBUSxZQUFSLENBRmQsQ0FHSUcsSUFBTUgsUUFBUSxRQUFSLENBSFYsQ0FJSUksUUFBVUosUUFBUSxZQUFSLENBSmQsQ0FLSUssV0FBYUwsUUFBUSxlQUFSLENBTGpCLENBTUlNLFNBQVdOLFFBQVEsYUFBUixDQU5mLENBU0EsR0FBSU8sUUFBUyxjQUFiLENBQ0lDLFVBQVksaUJBRGhCLENBRUlDLFdBQWEsa0JBRmpCLENBR0lDLE9BQVMsY0FIYixDQUlJQyxXQUFhLGtCQUpqQixDQU1BLEdBQUlDLGFBQWMsbUJBQWxCLENBR0EsR0FBSUMsb0JBQXFCUCxTQUFTUCxRQUFULENBQXpCLENBQ0llLGNBQWdCUixTQUFTTCxHQUFULENBRHBCLENBRUljLGtCQUFvQlQsU0FBU0osT0FBVCxDQUZ4QixDQUdJYyxjQUFnQlYsU0FBU0gsR0FBVCxDQUhwQixDQUlJYyxrQkFBb0JYLFNBQVNGLE9BQVQsQ0FKeEIsQ0FhQSxHQUFJYyxRQUFTYixVQUFiLENBR0EsR0FBS04sVUFBWW1CLE9BQU8sR0FBSW5CLFNBQUosQ0FBYSxHQUFJb0IsWUFBSixDQUFnQixDQUFoQixDQUFiLENBQVAsR0FBNENQLFdBQXpELEVBQ0NYLEtBQU9pQixPQUFPLEdBQUlqQixJQUFKLEVBQVAsR0FBbUJNLE1BRDNCLEVBRUNMLFNBQVdnQixPQUFPaEIsUUFBUWtCLE9BQVIsRUFBUCxHQUE2QlgsVUFGekMsRUFHQ04sS0FBT2UsT0FBTyxHQUFJZixJQUFKLEVBQVAsR0FBbUJPLE1BSDNCLEVBSUNOLFNBQVdjLE9BQU8sR0FBSWQsUUFBSixFQUFQLEdBQXVCTyxVQUp2QyxDQUlvRCxDQUNsRE8sT0FBUyxnQkFBU0csS0FBVCxDQUFnQixDQUN2QixHQUFJQyxRQUFTakIsV0FBV2dCLEtBQVgsQ0FBYixDQUNJRSxLQUFPRCxRQUFVZCxTQUFWLENBQXNCYSxNQUFNRyxXQUE1QixDQUEwQ0MsU0FEckQsQ0FFSUMsV0FBYUgsS0FBT2pCLFNBQVNpQixJQUFULENBQVAsQ0FBd0IsRUFGekMsQ0FJQSxHQUFJRyxVQUFKLENBQWdCLENBQ2QsT0FBUUEsVUFBUixFQUNFLElBQUtiLG1CQUFMLENBQXlCLE1BQU9ELFlBQVAsQ0FDekIsSUFBS0UsY0FBTCxDQUFvQixNQUFPUCxPQUFQLENBQ3BCLElBQUtRLGtCQUFMLENBQXdCLE1BQU9OLFdBQVAsQ0FDeEIsSUFBS08sY0FBTCxDQUFvQixNQUFPTixPQUFQLENBQ3BCLElBQUtPLGtCQUFMLENBQXdCLE1BQU9OLFdBQVAsQ0FMMUIsQ0FPRCxDQUNELE1BQU9XLE9BQVAsQ0FDRCxDQWZELENBZ0JELENBRURLLE9BQU9DLE9BQVAsQ0FBaUJWLE1BQWpCIiwiZmlsZSI6Il9nZXRUYWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iXX0=