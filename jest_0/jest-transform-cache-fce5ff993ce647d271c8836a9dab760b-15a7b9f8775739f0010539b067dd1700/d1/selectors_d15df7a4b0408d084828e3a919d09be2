e576fea8a9fad6092e96ec10982e87e8
Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&typeof(typeof Symbol==="function"?Symbol.iterator:"@@iterator")==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==(typeof Symbol==="function"?Symbol.prototype:"@@prototype")?"symbol":typeof obj;};exports.buildPredicate=buildPredicate;exports.reduceTreeBySelector=reduceTreeBySelector;exports.reduceTreesBySelector=reduceTreesBySelector;var _rstSelectorParser=require("rst-selector-parser");var _object=require("object.values");var _object2=_interopRequireDefault(_object);var _isEmpty=require("lodash/isEmpty");var _isEmpty2=_interopRequireDefault(_isEmpty);var _flatten=require("lodash/flatten");var _flatten2=_interopRequireDefault(_flatten);var _uniq=require("lodash/uniq");var _uniq2=_interopRequireDefault(_uniq);var _objectIs=require("object-is");var _objectIs2=_interopRequireDefault(_objectIs);var _has=require("has");var _has2=_interopRequireDefault(_has);var _RSTTraversal=require('./RSTTraversal');var _Utils=require('./Utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var parser=(0,_rstSelectorParser.createParser)();var CHILD='childCombinator';var ADJACENT_SIBLING='adjacentSiblingCombinator';var GENERAL_SIBLING='generalSiblingCombinator';var DESCENDANT='descendantCombinator';var SELECTOR='selector';var TYPE_SELECTOR='typeSelector';var CLASS_SELECTOR='classSelector';var ID_SELECTOR='idSelector';var ATTRIBUTE_PRESENCE='attributePresenceSelector';var ATTRIBUTE_VALUE='attributeValueSelector';var PSEUDO_CLASS='pseudoClassSelector';var PSEUDO_ELEMENT='pseudoElementSelector';var EXACT_ATTRIBUTE_OPERATOR='=';var WHITELIST_ATTRIBUTE_OPERATOR='~=';var HYPHENATED_ATTRIBUTE_OPERATOR='|=';var PREFIX_ATTRIBUTE_OPERATOR='^=';var SUFFIX_ATTRIBUTE_OPERATOR='$=';var SUBSTRING_ATTRIBUTE_OPERATOR='*=';function uniqueReduce(fn,nodes){return(0,_uniq2['default'])(nodes.reduce(fn,[]));}function safelyGenerateTokens(selector){try{return parser.parse(selector);}catch(err){throw new Error('Failed to parse selector: '+String(selector));}}function matchAttributeSelector(node,token){var operator=token.operator,value=token.value,name=token.name;var nodeProps=(0,_Utils.propsOfNode)(node);var descriptor=Object.getOwnPropertyDescriptor(nodeProps,name);if(descriptor&&descriptor.get){return false;}var nodePropValue=nodeProps[name];if(typeof nodePropValue==='undefined'){return false;}if(token.type===ATTRIBUTE_PRESENCE){return(0,_has2['default'])(nodeProps,token.name);}if(typeof nodePropValue!=='string'||typeof value!=='string'){if(operator!==EXACT_ATTRIBUTE_OPERATOR){return false;}}switch(operator){case EXACT_ATTRIBUTE_OPERATOR:return(0,_objectIs2['default'])(nodePropValue,value);case WHITELIST_ATTRIBUTE_OPERATOR:return nodePropValue.split(' ').indexOf(value)!==-1;case HYPHENATED_ATTRIBUTE_OPERATOR:return nodePropValue===value||nodePropValue.startsWith(String(value)+'-');case PREFIX_ATTRIBUTE_OPERATOR:return value===''?false:nodePropValue.slice(0,value.length)===value;case SUFFIX_ATTRIBUTE_OPERATOR:return value===''?false:nodePropValue.slice(-value.length)===value;case SUBSTRING_ATTRIBUTE_OPERATOR:return value===''?false:nodePropValue.indexOf(value)!==-1;default:throw new Error('Enzyme::Selector: Unknown attribute selector operator "'+String(operator)+'"');}}function nodeMatchesToken(node,token){if(node===null||typeof node==='string'){return false;}switch(token.type){case CLASS_SELECTOR:return(0,_RSTTraversal.hasClassName)(node,token.name);case TYPE_SELECTOR:return(0,_Utils.nodeHasType)(node,token.name);case ID_SELECTOR:return(0,_RSTTraversal.nodeHasId)(node,token.name);case ATTRIBUTE_PRESENCE:return matchAttributeSelector(node,token);case ATTRIBUTE_VALUE:return matchAttributeSelector(node,token);case PSEUDO_ELEMENT:case PSEUDO_CLASS:throw new Error('Enzyme::Selector does not support pseudo-element or pseudo-class selectors.');default:throw new Error('Unknown token type: '+String(token.type));}}function buildPredicateFromToken(token){return function(node){return token.body.every(function(bodyToken){return nodeMatchesToken(node,bodyToken);});};}function isComplexSelector(tokens){return tokens.some(function(token){return token.type!==SELECTOR;});}function buildPredicate(selector){if(typeof selector==='function'){return function(node){return node&&node.type===selector;};}if((typeof selector==='undefined'?'undefined':_typeof(selector))==='object'){if(!Array.isArray(selector)&&selector!==null&&!(0,_isEmpty2['default'])(selector)){var hasUndefinedValues=(0,_object2['default'])(selector).some(function(value){return typeof value==='undefined';});if(hasUndefinedValues){throw new TypeError('Enzyme::Props can’t have `undefined` values. Try using ‘findWhere()’ instead.');}return function(node){return(0,_RSTTraversal.nodeMatchesObjectProps)(node,selector);};}throw new TypeError('Enzyme::Selector does not support an array, null, or empty object as a selector');}if(typeof selector==='string'){var tokens=safelyGenerateTokens(selector);if(isComplexSelector(tokens)){throw new TypeError('This method does not support complex CSS selectors');}return buildPredicateFromToken(tokens[0]);}throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');}function matchAdjacentSiblings(nodes,predicate,root){return nodes.reduce(function(matches,node){var parent=(0,_RSTTraversal.findParentNode)(root,node);if(!parent){return matches;}var nodeIndex=parent.rendered.indexOf(node);var adjacentSibling=parent.rendered[nodeIndex+1];if(!adjacentSibling){return matches;}if(predicate(adjacentSibling)){matches.push(adjacentSibling);}return matches;},[]);}function matchGeneralSibling(nodes,predicate,root){return uniqueReduce(function(matches,node){var parent=(0,_RSTTraversal.findParentNode)(root,node);var nodeIndex=parent.rendered.indexOf(node);parent.rendered.forEach(function(sibling,i){if(i>nodeIndex&&predicate(sibling)){matches.push(sibling);}});return matches;},nodes);}function matchDirectChild(nodes,predicate){return uniqueReduce(function(matches,node){var children=(0,_RSTTraversal.childrenOfNode)(node);children.forEach(function(child){if(predicate(child)){matches.push(child);}});return matches;},nodes);}function matchDescendant(nodes,predicate){return uniqueReduce(function(matches,node){return matches.concat((0,_RSTTraversal.treeFilter)(node,predicate));},nodes);}function reduceTreeBySelector(selector,root){var results=[];if(typeof selector==='function'||(typeof selector==='undefined'?'undefined':_typeof(selector))==='object'){results=(0,_RSTTraversal.treeFilter)(root,buildPredicate(selector));}else if(typeof selector==='string'){var tokens=safelyGenerateTokens(selector);var index=0;var token=null;while(index<tokens.length){token=tokens[index];if(token.type===SELECTOR){var predicate=buildPredicateFromToken(token);results=results.concat((0,_RSTTraversal.treeFilter)(root,predicate));}else{var _token=token,type=_token.type;index+=1;token=tokens[index];var _predicate=buildPredicateFromToken(token);switch(type){case ADJACENT_SIBLING:results=matchAdjacentSiblings(results,_predicate,root);break;case GENERAL_SIBLING:results=matchGeneralSibling(results,_predicate,root);break;case CHILD:results=matchDirectChild(results,_predicate);break;case DESCENDANT:{results=matchDescendant(results,_predicate);break;}default:throw new Error('Unkown combinator selector: '+String(type));}}index+=1;}}else{throw new TypeError('Enzyme::Selector expects a string, object, or Component Constructor');}return results;}function reduceTreesBySelector(selector,roots){var results=roots.map(function(n){return reduceTreeBySelector(selector,n);});return(0,_uniq2['default'])((0,_flatten2['default'])(results));}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,