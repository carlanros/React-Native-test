{"version":3,"sources":["_equalArrays.js"],"names":["SetCache","require","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","stacked","get","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push","module","exports"],"mappings":"AAAA,GAAIA,UAAWC,QAAQ,aAAR,CAAf,CACIC,UAAYD,QAAQ,cAAR,CADhB,CAEIE,SAAWF,QAAQ,aAAR,CAFf,CAKA,GAAIG,sBAAuB,CAA3B,CACIC,uBAAyB,CAD7B,CAgBA,QAASC,YAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAmCC,OAAnC,CAA4CC,UAA5C,CAAwDC,SAAxD,CAAmEC,KAAnE,CAA0E,CACxE,GAAIC,WAAYJ,QAAUL,oBAA1B,CACIU,UAAYP,MAAMQ,MADtB,CAEIC,UAAYR,MAAMO,MAFtB,CAIA,GAAID,WAAaE,SAAb,EAA0B,EAAEH,WAAaG,UAAYF,SAA3B,CAA9B,CAAqE,CACnE,MAAO,MAAP,CACD,CAED,GAAIG,SAAUL,MAAMM,GAAN,CAAUX,KAAV,CAAd,CACA,GAAIU,SAAWL,MAAMM,GAAN,CAAUV,KAAV,CAAf,CAAiC,CAC/B,MAAOS,UAAWT,KAAlB,CACD,CACD,GAAIW,OAAQ,CAAC,CAAb,CACIC,OAAS,IADb,CAEIC,KAAQZ,QAAUJ,sBAAX,CAAqC,GAAIL,SAAJ,EAArC,CAAoDsB,SAF/D,CAIAV,MAAMW,GAAN,CAAUhB,KAAV,CAAiBC,KAAjB,EACAI,MAAMW,GAAN,CAAUf,KAAV,CAAiBD,KAAjB,EAGA,MAAO,EAAEY,KAAF,CAAUL,SAAjB,CAA4B,CAC1B,GAAIU,UAAWjB,MAAMY,KAAN,CAAf,CACIM,SAAWjB,MAAMW,KAAN,CADf,CAGA,GAAIT,UAAJ,CAAgB,CACd,GAAIgB,UAAWb,UACXH,WAAWe,QAAX,CAAqBD,QAArB,CAA+BL,KAA/B,CAAsCX,KAAtC,CAA6CD,KAA7C,CAAoDK,KAApD,CADW,CAEXF,WAAWc,QAAX,CAAqBC,QAArB,CAA+BN,KAA/B,CAAsCZ,KAAtC,CAA6CC,KAA7C,CAAoDI,KAApD,CAFJ,CAGD,CACD,GAAIc,WAAaJ,SAAjB,CAA4B,CAC1B,GAAII,QAAJ,CAAc,CACZ,SACD,CACDN,OAAS,KAAT,CACA,MACD,CAED,GAAIC,IAAJ,CAAU,CACR,GAAI,CAACnB,UAAUM,KAAV,CAAiB,SAASiB,QAAT,CAAmBE,QAAnB,CAA6B,CAC7C,GAAI,CAACxB,SAASkB,IAAT,CAAeM,QAAf,CAAD,GACCH,WAAaC,QAAb,EAAyBd,UAAUa,QAAV,CAAoBC,QAApB,CAA8BhB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAD1B,CAAJ,CAC0F,CACxF,MAAOS,MAAKO,IAAL,CAAUD,QAAV,CAAP,CACD,CACF,CALA,CAAL,CAKQ,CACNP,OAAS,KAAT,CACA,MACD,CACF,CAVD,IAUO,IAAI,EACLI,WAAaC,QAAb,EACEd,UAAUa,QAAV,CAAoBC,QAApB,CAA8BhB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAFG,CAAJ,CAGA,CACLQ,OAAS,KAAT,CACA,MACD,CACF,CACDR,MAAM,QAAN,EAAgBL,KAAhB,EACAK,MAAM,QAAN,EAAgBJ,KAAhB,EACA,MAAOY,OAAP,CACD,CAEDS,OAAOC,OAAP,CAAiBxB,WAAjB","file":"_equalArrays.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"]}