{"version":3,"sources":["_baseDifference.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push","module","exports"],"mappings":"AAAA,GAAIA,UAAWC,QAAQ,aAAR,CAAf,CACIC,cAAgBD,QAAQ,kBAAR,CADpB,CAEIE,kBAAoBF,QAAQ,sBAAR,CAFxB,CAGIG,SAAWH,QAAQ,aAAR,CAHf,CAIII,UAAYJ,QAAQ,cAAR,CAJhB,CAKIK,SAAWL,QAAQ,aAAR,CALf,CAQA,GAAIM,kBAAmB,GAAvB,CAaA,QAASC,eAAT,CAAwBC,KAAxB,CAA+BC,MAA/B,CAAuCC,QAAvC,CAAiDC,UAAjD,CAA6D,CAC3D,GAAIC,OAAQ,CAAC,CAAb,CACIC,SAAWZ,aADf,CAEIa,SAAW,IAFf,CAGIC,OAASP,MAAMO,MAHnB,CAIIC,OAAS,EAJb,CAKIC,aAAeR,OAAOM,MAL1B,CAOA,GAAI,CAACA,MAAL,CAAa,CACX,MAAOC,OAAP,CACD,CACD,GAAIN,QAAJ,CAAc,CACZD,OAASN,SAASM,MAAT,CAAiBL,UAAUM,QAAV,CAAjB,CAAT,CACD,CACD,GAAIC,UAAJ,CAAgB,CACdE,SAAWX,iBAAX,CACAY,SAAW,KAAX,CACD,CAHD,IAIK,IAAIL,OAAOM,MAAP,EAAiBT,gBAArB,CAAuC,CAC1CO,SAAWR,QAAX,CACAS,SAAW,KAAX,CACAL,OAAS,GAAIV,SAAJ,CAAaU,MAAb,CAAT,CACD,CACDS,MACA,MAAO,EAAEN,KAAF,CAAUG,MAAjB,CAAyB,CACvB,GAAII,OAAQX,MAAMI,KAAN,CAAZ,CACIQ,SAAWV,UAAY,IAAZ,CAAmBS,KAAnB,CAA2BT,SAASS,KAAT,CAD1C,CAGAA,MAASR,YAAcQ,QAAU,CAAzB,CAA8BA,KAA9B,CAAsC,CAA9C,CACA,GAAIL,UAAYM,WAAaA,QAA7B,CAAuC,CACrC,GAAIC,aAAcJ,YAAlB,CACA,MAAOI,aAAP,CAAsB,CACpB,GAAIZ,OAAOY,WAAP,IAAwBD,QAA5B,CAAsC,CACpC,QAASF,MAAT,CACD,CACF,CACDF,OAAOM,IAAP,CAAYH,KAAZ,EACD,CARD,IASK,IAAI,CAACN,SAASJ,MAAT,CAAiBW,QAAjB,CAA2BT,UAA3B,CAAL,CAA6C,CAChDK,OAAOM,IAAP,CAAYH,KAAZ,EACD,CACF,CACD,MAAOH,OAAP,CACD,CAEDO,OAAOC,OAAP,CAAiBjB,cAAjB","file":"_baseDifference.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}