1dc113e999e3dc0512a3fffb04d0f324
'use strict';var invariant=require('fbjs/lib/invariant');var MAX_MERGE_DEPTH=36;var isTerminal=function isTerminal(o){return typeof o!=='object'||o instanceof Date||o===null;};var mergeHelpers={MAX_MERGE_DEPTH:MAX_MERGE_DEPTH,isTerminal:isTerminal,normalizeMergeArg:function normalizeMergeArg(arg){return arg===undefined||arg===null?{}:arg;},checkMergeArrayArgs:function checkMergeArrayArgs(one,two){invariant(Array.isArray(one)&&Array.isArray(two),'Tried to merge arrays, instead got %s and %s.',one,two);},checkMergeObjectArgs:function checkMergeObjectArgs(one,two){mergeHelpers.checkMergeObjectArg(one);mergeHelpers.checkMergeObjectArg(two);},checkMergeObjectArg:function checkMergeObjectArg(arg){invariant(!isTerminal(arg)&&!Array.isArray(arg),'Tried to merge an object, instead got %s.',arg);},checkMergeIntoObjectArg:function checkMergeIntoObjectArg(arg){invariant((!isTerminal(arg)||typeof arg==='function')&&!Array.isArray(arg),'Tried to merge into an object, instead got %s.',arg);},checkMergeLevel:function checkMergeLevel(level){invariant(level<MAX_MERGE_DEPTH,'Maximum deep merge depth exceeded. You may be attempting to merge '+'circular structures in an unsupported way.');},checkArrayStrategy:function checkArrayStrategy(strategy){invariant(strategy===undefined||strategy in mergeHelpers.ArrayStrategies,'You must provide an array strategy to deep merge functions to '+'instruct the deep merge how to resolve merging two arrays.');},ArrayStrategies:{Clobber:'Clobber',Concat:'Concat',IndexByIndex:'IndexByIndex'}};module.exports=mergeHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlSGVscGVycy5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiTUFYX01FUkdFX0RFUFRIIiwiaXNUZXJtaW5hbCIsIm8iLCJEYXRlIiwibWVyZ2VIZWxwZXJzIiwibm9ybWFsaXplTWVyZ2VBcmciLCJhcmciLCJ1bmRlZmluZWQiLCJjaGVja01lcmdlQXJyYXlBcmdzIiwib25lIiwidHdvIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hlY2tNZXJnZU9iamVjdEFyZ3MiLCJjaGVja01lcmdlT2JqZWN0QXJnIiwiY2hlY2tNZXJnZUludG9PYmplY3RBcmciLCJjaGVja01lcmdlTGV2ZWwiLCJsZXZlbCIsImNoZWNrQXJyYXlTdHJhdGVneSIsInN0cmF0ZWd5IiwiQXJyYXlTdHJhdGVnaWVzIiwiQ2xvYmJlciIsIkNvbmNhdCIsIkluZGV4QnlJbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQWFBLGFBRUEsR0FBSUEsV0FBWUMsT0FBWixzQkFBSixDQU1BLEdBQUlDLGlCQUFrQixFQUF0QixDQVFBLEdBQUlDLFlBQWEsUUFBYkEsV0FBYSxDQUFTQyxDQUFULENBQVksQ0FDM0IsTUFBTyxPQUFPQSxFQUFQLEdBQWEsUUFBYixFQUF5QkEsWUFBYUMsS0FBdEMsRUFBOENELElBQU0sSUFBM0QsQ0FDRCxDQUZELENBSUEsR0FBSUUsY0FBZSxDQUVqQkosZ0JBQWlCQSxlQUZBLENBSWpCQyxXQUFZQSxVQUpLLENBWWpCSSxrQkFBbUIsMkJBQVNDLEdBQVQsQ0FBYyxDQUMvQixNQUFPQSxPQUFRQyxTQUFSLEVBQXFCRCxNQUFRLElBQTdCLENBQW9DLEVBQXBDLENBQXlDQSxHQUFoRCxDQUNELENBZGdCLENBd0JqQkUsb0JBQXFCLDZCQUFTQyxHQUFULENBQWNDLEdBQWQsQ0FBbUIsQ0FDdENaLFVBQ0VhLE1BQU1DLE9BQU4sQ0FBY0gsR0FBZCxHQUFzQkUsTUFBTUMsT0FBTixDQUFjRixHQUFkLENBRHhCLENBRUUsK0NBRkYsQ0FHRUQsR0FIRixDQUlFQyxHQUpGLEVBTUQsQ0EvQmdCLENBcUNqQkcscUJBQXNCLDhCQUFTSixHQUFULENBQWNDLEdBQWQsQ0FBbUIsQ0FDdkNOLGFBQWFVLG1CQUFiLENBQWlDTCxHQUFqQyxFQUNBTCxhQUFhVSxtQkFBYixDQUFpQ0osR0FBakMsRUFDRCxDQXhDZ0IsQ0E2Q2pCSSxvQkFBcUIsNkJBQVNSLEdBQVQsQ0FBYyxDQUNqQ1IsVUFDRSxDQUFDRyxXQUFXSyxHQUFYLENBQUQsRUFBb0IsQ0FBQ0ssTUFBTUMsT0FBTixDQUFjTixHQUFkLENBRHZCLENBRUUsMkNBRkYsQ0FHRUEsR0FIRixFQUtELENBbkRnQixDQXdEakJTLHdCQUF5QixpQ0FBU1QsR0FBVCxDQUFjLENBQ3JDUixVQUNFLENBQUMsQ0FBQ0csV0FBV0ssR0FBWCxDQUFELEVBQW9CLE1BQU9BLElBQVAsR0FBZSxVQUFwQyxHQUFtRCxDQUFDSyxNQUFNQyxPQUFOLENBQWNOLEdBQWQsQ0FEdEQsQ0FFRSxnREFGRixDQUdFQSxHQUhGLEVBS0QsQ0E5RGdCLENBc0VqQlUsZ0JBQWlCLHlCQUFTQyxLQUFULENBQWdCLENBQy9CbkIsVUFDRW1CLE1BQVFqQixlQURWLENBRUUscUVBQ0EsNENBSEYsRUFLRCxDQTVFZ0IsQ0FtRmpCa0IsbUJBQW9CLDRCQUFTQyxRQUFULENBQW1CLENBQ3JDckIsVUFDRXFCLFdBQWFaLFNBQWIsRUFBMEJZLFdBQVlmLGNBQWFnQixlQURyRCxDQUVFLGlFQUNBLDREQUhGLEVBS0QsQ0F6RmdCLENBa0dqQkEsZ0JBQWlCLENBQ2ZDLFFBQVMsU0FETSxDQUVmQyxPQUFRLFFBRk8sQ0FHZkMsYUFBYyxjQUhDLENBbEdBLENBQW5CLENBMEdBQyxPQUFPQyxPQUFQLENBQWlCckIsWUFBakIiLCJmaWxlIjoibWVyZ2VIZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtZXJnZUhlbHBlcnNcbiAqXG4gKiByZXF1aXJlc1BvbHlmaWxsczogQXJyYXkuaXNBcnJheVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIE1heGltdW0gbnVtYmVyIG9mIGxldmVscyB0byB0cmF2ZXJzZS4gV2lsbCBjYXRjaCBjaXJjdWxhciBzdHJ1Y3R1cmVzLlxuICogQGNvbnN0XG4gKi9cbnZhciBNQVhfTUVSR0VfREVQVEggPSAzNjtcblxuLyoqXG4gKiBXZSB3b24ndCB3b3JyeSBhYm91dCBlZGdlIGNhc2VzIGxpa2UgbmV3IFN0cmluZygneCcpIG9yIG5ldyBCb29sZWFuKHRydWUpLlxuICogRnVuY3Rpb25zIGFuZCBEYXRlcyBhcmUgY29uc2lkZXJlZCB0ZXJtaW5hbHMsIGFuZCBhcnJheXMgYXJlIG5vdC5cbiAqIEBwYXJhbSB7Kn0gbyBUaGUgaXRlbS9vYmplY3QvdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWZmIHRoZSBhcmd1bWVudCBpcyBhIHRlcm1pbmFsLlxuICovXG52YXIgaXNUZXJtaW5hbCA9IGZ1bmN0aW9uKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvICE9PSAnb2JqZWN0JyB8fCBvIGluc3RhbmNlb2YgRGF0ZSB8fCBvID09PSBudWxsO1xufTtcblxudmFyIG1lcmdlSGVscGVycyA9IHtcblxuICBNQVhfTUVSR0VfREVQVEg6IE1BWF9NRVJHRV9ERVBUSCxcblxuICBpc1Rlcm1pbmFsOiBpc1Rlcm1pbmFsLFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBudWxsL3VuZGVmaW5lZCB2YWx1ZXMgaW50byBlbXB0eSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7P09iamVjdD19IGFyZyBBcmd1bWVudCB0byBiZSBub3JtYWxpemVkIChudWxsYWJsZSBvcHRpb25hbClcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIG5vcm1hbGl6ZU1lcmdlQXJnOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSB1bmRlZmluZWQgfHwgYXJnID09PSBudWxsID8ge30gOiBhcmc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIG1lcmdpbmcgQXJyYXlzLCBhIG1lcmdlIHN0cmF0ZWd5ICptdXN0KiBiZSBzdXBwbGllZC4gSWYgbm90LCBpdCBpc1xuICAgKiBsaWtlbHkgdGhlIGNhbGxlcidzIGZhdWx0LiBJZiB0aGlzIGZ1bmN0aW9uIGlzIGV2ZXIgY2FsbGVkIHdpdGggYW55dGhpbmdcbiAgICogYnV0IGBvbmVgIGFuZCBgdHdvYCBiZWluZyBgQXJyYXlgcywgaXQgaXMgdGhlIGZhdWx0IG9mIHRoZSBtZXJnZSB1dGlsaXRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb25lIEFycmF5IHRvIG1lcmdlIGludG8uXG4gICAqIEBwYXJhbSB7Kn0gdHdvIEFycmF5IHRvIG1lcmdlIGZyb20uXG4gICAqL1xuICBjaGVja01lcmdlQXJyYXlBcmdzOiBmdW5jdGlvbihvbmUsIHR3bykge1xuICAgIGludmFyaWFudChcbiAgICAgIEFycmF5LmlzQXJyYXkob25lKSAmJiBBcnJheS5pc0FycmF5KHR3byksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgYXJyYXlzLCBpbnN0ZWFkIGdvdCAlcyBhbmQgJXMuJyxcbiAgICAgIG9uZSxcbiAgICAgIHR3b1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Kn0gb25lIE9iamVjdCB0byBtZXJnZSBpbnRvLlxuICAgKiBAcGFyYW0geyp9IHR3byBPYmplY3QgdG8gbWVyZ2UgZnJvbS5cbiAgICovXG4gIGNoZWNrTWVyZ2VPYmplY3RBcmdzOiBmdW5jdGlvbihvbmUsIHR3bykge1xuICAgIG1lcmdlSGVscGVycy5jaGVja01lcmdlT2JqZWN0QXJnKG9uZSk7XG4gICAgbWVyZ2VIZWxwZXJzLmNoZWNrTWVyZ2VPYmplY3RBcmcodHdvKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBhcmdcbiAgICovXG4gIGNoZWNrTWVyZ2VPYmplY3RBcmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIGludmFyaWFudChcbiAgICAgICFpc1Rlcm1pbmFsKGFyZykgJiYgIUFycmF5LmlzQXJyYXkoYXJnKSxcbiAgICAgICdUcmllZCB0byBtZXJnZSBhbiBvYmplY3QsIGluc3RlYWQgZ290ICVzLicsXG4gICAgICBhcmdcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGFyZ1xuICAgKi9cbiAgY2hlY2tNZXJnZUludG9PYmplY3RBcmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIGludmFyaWFudChcbiAgICAgICghaXNUZXJtaW5hbChhcmcpIHx8IHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpICYmICFBcnJheS5pc0FycmF5KGFyZyksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgaW50byBhbiBvYmplY3QsIGluc3RlYWQgZ290ICVzLicsXG4gICAgICBhcmdcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhhdCBhIG1lcmdlIHdhcyBub3QgZ2l2ZW4gYSBjaXJjdWxhciBvYmplY3Qgb3IgYW4gb2JqZWN0IHRoYXQgaGFkXG4gICAqIHRvbyBncmVhdCBvZiBkZXB0aC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IExldmVsIG9mIHJlY3Vyc2lvbiB0byB2YWxpZGF0ZSBhZ2FpbnN0IG1heGltdW0uXG4gICAqL1xuICBjaGVja01lcmdlTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgbGV2ZWwgPCBNQVhfTUVSR0VfREVQVEgsXG4gICAgICAnTWF4aW11bSBkZWVwIG1lcmdlIGRlcHRoIGV4Y2VlZGVkLiBZb3UgbWF5IGJlIGF0dGVtcHRpbmcgdG8gbWVyZ2UgJyArXG4gICAgICAnY2lyY3VsYXIgc3RydWN0dXJlcyBpbiBhbiB1bnN1cHBvcnRlZCB3YXkuJ1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGF0IHRoZSBzdXBwbGllZCBtZXJnZSBzdHJhdGVneSBpcyB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IEFycmF5IG1lcmdlIHN0cmF0ZWd5LlxuICAgKi9cbiAgY2hlY2tBcnJheVN0cmF0ZWd5OiBmdW5jdGlvbihzdHJhdGVneSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHN0cmF0ZWd5ID09PSB1bmRlZmluZWQgfHwgc3RyYXRlZ3kgaW4gbWVyZ2VIZWxwZXJzLkFycmF5U3RyYXRlZ2llcyxcbiAgICAgICdZb3UgbXVzdCBwcm92aWRlIGFuIGFycmF5IHN0cmF0ZWd5IHRvIGRlZXAgbWVyZ2UgZnVuY3Rpb25zIHRvICcgK1xuICAgICAgJ2luc3RydWN0IHRoZSBkZWVwIG1lcmdlIGhvdyB0byByZXNvbHZlIG1lcmdpbmcgdHdvIGFycmF5cy4nXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IG9mIHBvc3NpYmxlIGJlaGF2aW9ycyBvZiBtZXJnZSBhbGdvcml0aG1zIHdoZW4gZW5jb3VudGVyaW5nIHR3byBBcnJheXNcbiAgICogdGhhdCBtdXN0IGJlIG1lcmdlZCB0b2dldGhlci5cbiAgICogLSBgY2xvYmJlcmA6IFRoZSBsZWZ0IGBBcnJheWAgaXMgaWdub3JlZC5cbiAgICogLSBgaW5kZXhCeUluZGV4YDogVGhlIHJlc3VsdCBpcyBhY2hpZXZlZCBieSByZWN1cnNpdmVseSBkZWVwIG1lcmdpbmcgYXRcbiAgICogICBlYWNoIGluZGV4LiAobm90IHlldCBzdXBwb3J0ZWQuKVxuICAgKi9cbiAgQXJyYXlTdHJhdGVnaWVzOiB7XG4gICAgQ2xvYmJlcjogJ0Nsb2JiZXInLFxuICAgIENvbmNhdDogJ0NvbmNhdCcsXG4gICAgSW5kZXhCeUluZGV4OiAnSW5kZXhCeUluZGV4JyxcbiAgfSxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZUhlbHBlcnM7XG4iXX0=