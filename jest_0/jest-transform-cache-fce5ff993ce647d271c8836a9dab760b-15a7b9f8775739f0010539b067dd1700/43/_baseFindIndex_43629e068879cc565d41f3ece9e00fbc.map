{"version":3,"sources":["_baseFindIndex.js"],"names":["baseFindIndex","array","predicate","fromIndex","fromRight","length","index","module","exports"],"mappings":"AAWA,QAASA,cAAT,CAAuBC,KAAvB,CAA8BC,SAA9B,CAAyCC,SAAzC,CAAoDC,SAApD,CAA+D,CAC7D,GAAIC,QAASJ,MAAMI,MAAnB,CACIC,MAAQH,WAAaC,UAAY,CAAZ,CAAgB,CAAC,CAA9B,CADZ,CAGA,MAAQA,UAAYE,OAAZ,CAAsB,EAAEA,KAAF,CAAUD,MAAxC,CAAiD,CAC/C,GAAIH,UAAUD,MAAMK,KAAN,CAAV,CAAwBA,KAAxB,CAA+BL,KAA/B,CAAJ,CAA2C,CACzC,MAAOK,MAAP,CACD,CACF,CACD,MAAO,CAAC,CAAR,CACD,CAEDC,OAAOC,OAAP,CAAiBR,aAAjB","file":"_baseFindIndex.js","sourcesContent":["/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n"]}