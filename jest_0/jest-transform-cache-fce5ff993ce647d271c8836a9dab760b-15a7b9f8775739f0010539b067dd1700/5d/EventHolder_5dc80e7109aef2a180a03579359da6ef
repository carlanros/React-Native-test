ca91c5d0ef82ce3ebe3b531dc7d07d31
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var invariant=require('fbjs/lib/invariant');var EventHolder=function(){function EventHolder(){_classCallCheck(this,EventHolder);this._heldEvents={};this._currentEventKey=null;}_createClass(EventHolder,[{key:'holdEvent',value:function holdEvent(eventType){this._heldEvents[eventType]=this._heldEvents[eventType]||[];var eventsOfType=this._heldEvents[eventType];var key={eventType:eventType,index:eventsOfType.length};for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}eventsOfType.push(args);return key;}},{key:'emitToListener',value:function emitToListener(eventType,listener,context){var _this=this;var eventsOfType=this._heldEvents[eventType];if(!eventsOfType){return;}var origEventKey=this._currentEventKey;eventsOfType.forEach(function(eventHeld,index){if(!eventHeld){return;}_this._currentEventKey={eventType:eventType,index:index};listener.apply(context,eventHeld);});this._currentEventKey=origEventKey;}},{key:'releaseCurrentEvent',value:function releaseCurrentEvent(){invariant(this._currentEventKey!==null,'Not in an emitting cycle; there is no current event');this._currentEventKey&&this.releaseEvent(this._currentEventKey);}},{key:'releaseEvent',value:function releaseEvent(token){delete this._heldEvents[token.eventType][token.index];}},{key:'releaseEventType',value:function releaseEventType(type){this._heldEvents[type]=[];}}]);return EventHolder;}();module.exports=EventHolder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50SG9sZGVyLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudEhvbGRlciIsIl9oZWxkRXZlbnRzIiwiX2N1cnJlbnRFdmVudEtleSIsImV2ZW50VHlwZSIsImV2ZW50c09mVHlwZSIsImtleSIsImluZGV4IiwibGVuZ3RoIiwiYXJncyIsInB1c2giLCJsaXN0ZW5lciIsImNvbnRleHQiLCJvcmlnRXZlbnRLZXkiLCJmb3JFYWNoIiwiZXZlbnRIZWxkIiwiYXBwbHkiLCJyZWxlYXNlRXZlbnQiLCJ0b2tlbiIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFXQSxhLCtvQkFFQSxHQUFNQSxXQUFZQyxPQUFaLHNCQUFOLEMsR0FFTUMsWSxZQUtKLHNCQUFjLG1DQUNaLEtBQUtDLFdBQUwsQ0FBbUIsRUFBbkIsQ0FDQSxLQUFLQyxnQkFBTCxDQUF3QixJQUF4QixDQUNELEMsb0VBdUJTQyxTLENBQWlDLENBQ3pDLEtBQUtGLFdBQUwsQ0FBaUJFLFNBQWpCLEVBQThCLEtBQUtGLFdBQUwsQ0FBaUJFLFNBQWpCLEdBQStCLEVBQTdELENBQ0EsR0FBTUMsY0FBZSxLQUFLSCxXQUFMLENBQWlCRSxTQUFqQixDQUFyQixDQUNBLEdBQU1FLEtBQU0sQ0FDVkYsVUFBV0EsU0FERCxDQUVWRyxNQUFPRixhQUFhRyxNQUZWLENBQVosQ0FIeUMsOEJBQVhDLElBQVcsaURBQVhBLElBQVcsMEJBT3pDSixhQUFhSyxJQUFiLENBQWtCRCxJQUFsQixFQUNBLE1BQU9ILElBQVAsQ0FDRCxDLHNEQVVjRixTLENBQXFCTyxRLENBQW9CQyxPLENBQWtCLGdCQUN4RSxHQUFNUCxjQUFlLEtBQUtILFdBQUwsQ0FBaUJFLFNBQWpCLENBQXJCLENBQ0EsR0FBSSxDQUFDQyxZQUFMLENBQW1CLENBQ2pCLE9BQ0QsQ0FDRCxHQUFNUSxjQUFlLEtBQUtWLGdCQUExQixDQUNBRSxhQUFhUyxPQUFiLENBQXFCLFNBQVlDLFNBQVosQ0FBa0NSLEtBQWxDLENBQTRDLENBQy9ELEdBQUksQ0FBQ1EsU0FBTCxDQUFnQixDQUNkLE9BQ0QsQ0FDRCxNQUFLWixnQkFBTCxDQUF3QixDQUN0QkMsVUFBV0EsU0FEVyxDQUV0QkcsTUFBT0EsS0FGZSxDQUF4QixDQUlBSSxTQUFTSyxLQUFULENBQWVKLE9BQWYsQ0FBd0JHLFNBQXhCLEVBQ0QsQ0FURCxFQVVBLEtBQUtaLGdCQUFMLENBQXdCVSxZQUF4QixDQUNELEMsaUVBVXFCLENBQ3BCZCxVQUNFLEtBQUtJLGdCQUFMLEdBQTBCLElBRDVCLENBRUUscURBRkYsRUFJQSxLQUFLQSxnQkFBTCxFQUF5QixLQUFLYyxZQUFMLENBQWtCLEtBQUtkLGdCQUF2QixDQUF6QixDQUNELEMsa0RBUVllLEssQ0FBZSxDQUMxQixNQUFPLE1BQUtoQixXQUFMLENBQWlCZ0IsTUFBTWQsU0FBdkIsRUFBa0NjLE1BQU1YLEtBQXhDLENBQVAsQ0FDRCxDLDBEQU9nQlksSSxDQUFjLENBQzdCLEtBQUtqQixXQUFMLENBQWlCaUIsSUFBakIsRUFBeUIsRUFBekIsQ0FDRCxDLDJCQUdIQyxPQUFPQyxPQUFQLENBQWlCcEIsV0FBakIiLCJmaWxlIjoiRXZlbnRIb2xkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50SG9sZGVyXG4gKiBAZmxvd1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5jbGFzcyBFdmVudEhvbGRlciB7XG5cbiAgX2hlbGRFdmVudHM6IE9iamVjdDtcbiAgX2N1cnJlbnRFdmVudEtleTogP09iamVjdDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9oZWxkRXZlbnRzID0ge307XG4gICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIb2xkcyBhIGdpdmVuIGV2ZW50IGZvciBwcm9jZXNzaW5nIGxhdGVyLlxuICAgKlxuICAgKiBUT0RPOiBBbm5vdGF0ZSByZXR1cm4gdHlwZSBiZXR0ZXIuIFRoZSBzdHJ1Y3R1cmFsIHR5cGUgb2YgdGhlIHJldHVybiBoZXJlXG4gICAqICAgICAgIGlzIHByZXR0eSBvYnZpb3VzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gaG9sZCBhbmQgbGF0ZXIgZW1pdFxuICAgKiBAcGFyYW0gey4uLip9IEFyYml0cmFyeSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGVhY2ggcmVnaXN0ZXJlZCBsaXN0ZW5lclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVsZWFzZSB0aGUgaGVsZCBldmVudFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiAgIGhvbGRlci5ob2xkRXZlbnQoe3NvbWVFdmVudDogJ2FiYyd9KTtcbiAgICpcbiAgICogICBob2xkZXIuZW1pdFRvSGFuZGxlcih7XG4gICAqICAgICBzb21lRXZlbnQ6IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgKiAgICAgfVxuICAgKiAgIH0pOyAvL2xvZ3MgJ2FiYydcbiAgICpcbiAgICovXG4gIGhvbGRFdmVudChldmVudFR5cGU6IHN0cmluZywgLi4uYXJnczogYW55KSB7XG4gICAgdGhpcy5faGVsZEV2ZW50c1tldmVudFR5cGVdID0gdGhpcy5faGVsZEV2ZW50c1tldmVudFR5cGVdIHx8IFtdO1xuICAgIGNvbnN0IGV2ZW50c09mVHlwZSA9IHRoaXMuX2hlbGRFdmVudHNbZXZlbnRUeXBlXTtcbiAgICBjb25zdCBrZXkgPSB7XG4gICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgIGluZGV4OiBldmVudHNPZlR5cGUubGVuZ3RoXG4gICAgfTtcbiAgICBldmVudHNPZlR5cGUucHVzaChhcmdzKTtcbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIHRoZSBoZWxkIGV2ZW50cyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgdG8gdGhlIGdpdmVuIGxpc3RlbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGV2ZW50VHlwZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50cyB0byByZXBsYXlcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgbGlzdGVuZXIgdG8gd2hpY2ggdG8gZGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dCAtIE9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGludm9raW5nXG4gICAqICAgdGhlIGxpc3RlbmVyXG4gICAqL1xuICBlbWl0VG9MaXN0ZW5lcihldmVudFR5cGU6ID9zdHJpbmcgLCBsaXN0ZW5lcjogRnVuY3Rpb24sIGNvbnRleHQ6ID9PYmplY3QpIHtcbiAgICBjb25zdCBldmVudHNPZlR5cGUgPSB0aGlzLl9oZWxkRXZlbnRzW2V2ZW50VHlwZV07XG4gICAgaWYgKCFldmVudHNPZlR5cGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ0V2ZW50S2V5ID0gdGhpcy5fY3VycmVudEV2ZW50S2V5O1xuICAgIGV2ZW50c09mVHlwZS5mb3JFYWNoKCgvKj9hcnJheSovIGV2ZW50SGVsZCwgLypudW1iZXIqLyBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFldmVudEhlbGQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ID0ge1xuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSxcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9O1xuICAgICAgbGlzdGVuZXIuYXBwbHkoY29udGV4dCwgZXZlbnRIZWxkKTtcbiAgICB9KTtcbiAgICB0aGlzLl9jdXJyZW50RXZlbnRLZXkgPSBvcmlnRXZlbnRLZXk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gQVBJIHRoYXQgY2FuIGJlIGNhbGxlZCBkdXJpbmcgYW4gZXZlbnRpbmcgY3ljbGUgdG8gcmVsZWFzZVxuICAgKiB0aGUgbGFzdCBldmVudCB0aGF0IHdhcyBpbnZva2VkLCBzbyB0aGF0IGl0IGlzIG5vIGxvbmdlciBcImhlbGRcIi5cbiAgICpcbiAgICogSWYgaXQgaXMgY2FsbGVkIHdoZW4gbm90IGluc2lkZSBvZiBhbiBlbWl0dGluZyBjeWNsZSBpdCB3aWxsIHRocm93LlxuICAgKlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gV2hlbiBjYWxsZWQgbm90IGR1cmluZyBhbiBldmVudGluZyBjeWNsZVxuICAgKi9cbiAgcmVsZWFzZUN1cnJlbnRFdmVudCgpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLl9jdXJyZW50RXZlbnRLZXkgIT09IG51bGwsXG4gICAgICAnTm90IGluIGFuIGVtaXR0aW5nIGN5Y2xlOyB0aGVyZSBpcyBubyBjdXJyZW50IGV2ZW50J1xuICAgICk7XG4gICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ICYmIHRoaXMucmVsZWFzZUV2ZW50KHRoaXMuX2N1cnJlbnRFdmVudEtleSk7XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZXMgdGhlIGV2ZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGhhbmRsZSB0aGF0IHdhcyByZXR1cm5lZCB3aGVuIHRoZVxuICAgKiBldmVudCB3YXMgZmlyc3QgaGVsZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHRva2VuIC0gVGhlIHRva2VuIHJldHVybmVkIGZyb20gaG9sZEV2ZW50XG4gICAqL1xuICByZWxlYXNlRXZlbnQodG9rZW46IE9iamVjdCkge1xuICAgIGRlbGV0ZSB0aGlzLl9oZWxkRXZlbnRzW3Rva2VuLmV2ZW50VHlwZV1bdG9rZW4uaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFsbCBldmVudHMgb2YgYSBjZXJ0YWluIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqL1xuICByZWxlYXNlRXZlbnRUeXBlKHR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuX2hlbGRFdmVudHNbdHlwZV0gPSBbXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50SG9sZGVyO1xuIl19