{"version":3,"sources":["_reorder.js"],"names":["copyArray","require","isIndex","nativeMin","Math","min","reorder","array","indexes","arrLength","length","oldArray","index","undefined","module","exports"],"mappings":"AAAA,GAAIA,WAAYC,QAAQ,cAAR,CAAhB,CACIC,QAAUD,QAAQ,YAAR,CADd,CAIA,GAAIE,WAAYC,KAAKC,GAArB,CAYA,QAASC,QAAT,CAAiBC,KAAjB,CAAwBC,OAAxB,CAAiC,CAC/B,GAAIC,WAAYF,MAAMG,MAAtB,CACIA,OAASP,UAAUK,QAAQE,MAAlB,CAA0BD,SAA1B,CADb,CAEIE,SAAWX,UAAUO,KAAV,CAFf,CAIA,MAAOG,QAAP,CAAiB,CACf,GAAIE,OAAQJ,QAAQE,MAAR,CAAZ,CACAH,MAAMG,MAAN,EAAgBR,QAAQU,KAAR,CAAeH,SAAf,EAA4BE,SAASC,KAAT,CAA5B,CAA8CC,SAA9D,CACD,CACD,MAAON,MAAP,CACD,CAEDO,OAAOC,OAAP,CAAiBT,OAAjB","file":"_reorder.js","sourcesContent":["var copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n"]}