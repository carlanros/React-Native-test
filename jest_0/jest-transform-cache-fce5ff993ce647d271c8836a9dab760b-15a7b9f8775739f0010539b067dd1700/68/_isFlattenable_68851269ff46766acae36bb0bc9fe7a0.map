{"version":3,"sources":["_isFlattenable.js"],"names":["Symbol","require","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","isFlattenable","value","module","exports"],"mappings":"AAAA,GAAIA,QAASC,QAAQ,WAAR,CAAb,CACIC,YAAcD,QAAQ,eAAR,CADlB,CAEIE,QAAUF,QAAQ,WAAR,CAFd,CAKA,GAAIG,kBAAmBJ,kCAASA,OAAOK,kBAAhB,wBAAqCC,SAA5D,CASA,QAASC,cAAT,CAAuBC,KAAvB,CAA8B,CAC5B,MAAOL,SAAQK,KAAR,GAAkBN,YAAYM,KAAZ,CAAlB,EACL,CAAC,EAAEJ,kBAAoBI,KAApB,EAA6BA,MAAMJ,gBAAN,CAA/B,CADH,CAED,CAEDK,OAAOC,OAAP,CAAiBH,aAAjB","file":"_isFlattenable.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n"]}