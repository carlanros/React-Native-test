{"version":3,"sources":["Text.js"],"names":["ColorPropType","require","EdgeInsetsPropType","NativeMethodsMixin","Platform","React","PropTypes","ReactNativeViewAttributes","StyleSheetPropType","TextStylePropTypes","Touchable","createReactClass","createReactNativeComponentClass","mergeFast","processColor","stylePropType","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","uiViewClassName","Text","displayName","propTypes","oneOf","number","onLayout","func","onPress","onLongPress","pressRetentionOffset","bool","suppressHighlighting","style","testID","string","nativeID","accessible","getDefaultProps","getInitialState","Mixin","touchableGetInitialState","mixins","getChildContext","isInAParentText","childContextTypes","contextTypes","_handlers","_hasPressHandler","props","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","touchableGetPressRectOffset","render","newProps","onStartShouldSetResponder","shouldSetFromProps","setResponder","key","bind","setState","e","PRESS_RECT_OFFSET","onResponderGrant","dispatchID","touchableHandleResponderGrant","apply","arguments","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","allowTermination","touchableHandleResponderTerminationRequest","state","TOUCH_TARGET_DEBUG","color","context","top","left","right","bottom","RCTText","RCTVirtualText","OS","module","exports"],"mappings":"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","file":"Text.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Text\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst TextStylePropTypes = require('TextStylePropTypes');\nconst Touchable = require('Touchable');\n\nconst createReactClass = require('create-react-class');\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst mergeFast = require('mergeFast');\nconst processColor = require('processColor');\n\nconst stylePropType = StyleSheetPropType(TextStylePropTypes);\n\nconst viewConfig = {\n  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n  }),\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * `Text` supports nesting, styling, and touch handling.\n *\n * In the following example, the nested title and body text will inherit the\n * `fontFamily` from `styles.baseText`, but the title provides its own\n * additional styles.  The title and body will stack on top of each other on\n * account of the literal newlines:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, Text, StyleSheet } from 'react-native';\n *\n * export default class TextInANest extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       titleText: \"Bird's Nest\",\n *       bodyText: 'This is not really a bird nest.'\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <Text style={styles.baseText}>\n *         <Text style={styles.titleText} onPress={this.onPressTitle}>\n *           {this.state.titleText}{'\\n'}{'\\n'}\n *         </Text>\n *         <Text numberOfLines={5}>\n *           {this.state.bodyText}\n *         </Text>\n *       </Text>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   baseText: {\n *     fontFamily: 'Cochin',\n *   },\n *   titleText: {\n *     fontSize: 20,\n *     fontWeight: 'bold',\n *   },\n * });\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('TextInANest', () => TextInANest);\n * ```\n *\n * ## Nested text\n *\n * Both iOS and Android allow you to display formatted text by annotating\n * ranges of a string with specific formatting like bold or colored text\n * (`NSAttributedString` on iOS, `SpannableString` on Android). In practice,\n * this is very tedious. For React Native, we decided to use web paradigm for\n * this where you can nest text to achieve the same effect.\n *\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, Text } from 'react-native';\n *\n * export default class BoldAndBeautiful extends Component {\n *   render() {\n *     return (\n *       <Text style={{fontWeight: 'bold'}}>\n *         I am bold\n *         <Text style={{color: 'red'}}>\n *           and red\n *         </Text>\n *       </Text>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => BoldAndBeautiful);\n * ```\n *\n * Behind the scenes, React Native converts this to a flat `NSAttributedString`\n * or `SpannableString` that contains the following information:\n *\n * ```javascript\n * \"I am bold and red\"\n * 0-9: bold\n * 9-17: bold, red\n * ```\n *\n * ## Nested views (iOS only)\n *\n * On iOS, you can nest views within your Text component. Here's an example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, Text, View } from 'react-native';\n *\n * export default class BlueIsCool extends Component {\n *   render() {\n *     return (\n *       <Text>\n *         There is a blue square\n *         <View style={{width: 50, height: 50, backgroundColor: 'steelblue'}} />\n *         in between my text.\n *       </Text>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => BlueIsCool);\n * ```\n *\n * > In order to use this feature, you must give the view a `width` and a `height`.\n *\n * ## Containers\n *\n * The `<Text>` element is special relative to layout: everything inside is no\n * longer using the flexbox layout but using text layout. This means that\n * elements inside of a `<Text>` are no longer rectangles, but wrap when they\n * see the end of the line.\n *\n * ```javascript\n * <Text>\n *   <Text>First part and </Text>\n *   <Text>second part</Text>\n * </Text>\n * // Text container: all the text flows as if it was one\n * // |First part |\n * // |and second |\n * // |part       |\n *\n * <View>\n *   <Text>First part and </Text>\n *   <Text>second part</Text>\n * </View>\n * // View container: each text is its own block\n * // |First part |\n * // |and        |\n * // |second part|\n * ```\n *\n * ## Limited Style Inheritance\n *\n * On the web, the usual way to set a font family and size for the entire\n * document is to take advantage of inherited CSS properties like so:\n *\n * ```css\n * html {\n *   font-family: 'lucida grande', tahoma, verdana, arial, sans-serif;\n *   font-size: 11px;\n *   color: #141823;\n * }\n * ```\n *\n * All elements in the document will inherit this font unless they or one of\n * their parents specifies a new rule.\n *\n * In React Native, we are more strict about it: **you must wrap all the text\n * nodes inside of a `<Text>` component**. You cannot have a text node directly\n * under a `<View>`.\n *\n *\n * ```javascript\n * // BAD: will raise exception, can't have a text node as child of a <View>\n * <View>\n *   Some text\n * </View>\n *\n * // GOOD\n * <View>\n *   <Text>\n *     Some text\n *   </Text>\n * </View>\n * ```\n *\n * You also lose the ability to set up a default font for an entire subtree.\n * The recommended way to use consistent fonts and sizes across your\n * application is to create a component `MyAppText` that includes them and use\n * this component across your app. You can also use this component to make more\n * specific components like `MyAppHeaderText` for other kinds of text.\n *\n * ```javascript\n * <View>\n *   <MyAppText>Text styled with the default font for the entire application</MyAppText>\n *   <MyAppHeaderText>Text styled as a header</MyAppHeaderText>\n * </View>\n * ```\n *\n * Assuming that `MyAppText` is a component that simply renders out its\n * children into a `Text` component with styling, then `MyAppHeaderText` can be\n * defined as follows:\n *\n * ```javascript\n * class MyAppHeaderText extends Component {\n *   render() {\n *     return (\n *       <MyAppText>\n *         <Text style={{fontSize: 20}}>\n *           {this.props.children}\n *         </Text>\n *       </MyAppText>\n *     );\n *   }\n * }\n * ```\n *\n * Composing `MyAppText` in this way ensures that we get the styles from a\n * top-level component, but leaves us the ability to add / override them in\n * specific use cases.\n *\n * React Native still has the concept of style inheritance, but limited to text\n * subtrees. In this case, the second part will be both bold and red.\n *\n * ```javascript\n * <Text style={{fontWeight: 'bold'}}>\n *   I am bold\n *   <Text style={{color: 'red'}}>\n *     and red\n *   </Text>\n * </Text>\n * ```\n *\n * We believe that this more constrained way to style text will yield better\n * apps:\n *\n * - (Developer) React components are designed with strong isolation in mind:\n * You should be able to drop a component anywhere in your application,\n * trusting that as long as the props are the same, it will look and behave the\n * same way. Text properties that could inherit from outside of the props would\n * break this isolation.\n *\n * - (Implementor) The implementation of React Native is also simplified. We do\n * not need to have a `fontFamily` field on every single element, and we do not\n * need to potentially traverse the tree up to the root every time we display a\n * text node. The style inheritance is only encoded inside of the native Text\n * component and doesn't leak to other components or the system itself.\n *\n */\n\nconst Text = createReactClass({\n  displayName: 'Text',\n  propTypes: {\n    /**\n     * When `numberOfLines` is set, this prop defines how text will be truncated.\n     * `numberOfLines` must be set in conjunction with this prop.\n     *\n     * This can be one of the following values:\n     *\n     * - `head` - The line is displayed so that the end fits in the container and the missing text\n     * at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n     * - `middle` - The line is displayed so that the beginning and end fit in the container and the\n     * missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n     * - `tail` - The line is displayed so that the beginning fits in the container and the\n     * missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n     * - `clip` - Lines are not drawn past the edge of the text container.\n     *\n     * The default is `tail`.\n     *\n     * > `clip` is working only for iOS\n     */\n    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),\n    /**\n     * Used to truncate the text with an ellipsis after computing the text\n     * layout, including line wrapping, such that the total number of lines\n     * does not exceed this number.\n     *\n     * This prop is commonly used with `ellipsizeMode`.\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `highQuality`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Invoked on mount and layout changes with\n     *\n     *   `{nativeEvent: {layout: {x, y, width, height}}}`\n     */\n    onLayout: PropTypes.func,\n    /**\n     * This function is called on press.\n     *\n     * e.g., `onPress={() => console.log('1st')}`\n     */\n    onPress: PropTypes.func,\n    /**\n     * This function is called on long press.\n     *\n     * e.g., `onLongPress={this.increaseSize}>`\n     */\n    onLongPress: PropTypes.func,\n    /**\n     * When the scroll view is disabled, this defines how far your touch may\n     * move off of the button, before deactivating the button. Once deactivated,\n     * try moving it back and you'll see that the button is once again\n     * reactivated! Move it back and forth several times while the scroll view\n     * is disabled. Ensure you pass in a constant to reduce memory allocations.\n     */\n    pressRetentionOffset: EdgeInsetsPropType,\n    /**\n     * Lets the user select text, to use the native copy and paste functionality.\n     */\n    selectable: PropTypes.bool,\n    /**\n     * The highlight color of the text.\n     * @platform android\n     */\n    selectionColor: ColorPropType,\n    /**\n     * When `true`, no visual change is made when text is pressed down. By\n     * default, a gray oval highlights the text on press down.\n     * @platform ios\n     */\n    suppressHighlighting: PropTypes.bool,\n    style: stylePropType,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n    /**\n     * Used to locate this view from native code.\n     */\n    nativeID: PropTypes.string,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * When set to `true`, indicates that the view is an accessibility element. The default value\n     * for a `Text` element is `true`.\n     *\n     * See the\n     * [Accessibility guide](docs/accessibility.html#accessible-ios-android)\n     * for more information.\n     */\n    accessible: PropTypes.bool,\n    /**\n     * Specifies whether font should be scaled down automatically to fit given style constraints.\n     * @platform ios\n     */\n    adjustsFontSizeToFit: PropTypes.bool,\n\n    /**\n     * Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).\n     * @platform ios\n     */\n    minimumFontScale: PropTypes.number,\n    /**\n     * Specifies the disabled state of the text view for testing purposes\n     * @platform android\n     */\n    disabled: PropTypes.bool,\n  },\n  getDefaultProps(): Object {\n    return {\n      accessible: true,\n      allowFontScaling: true,\n      ellipsizeMode: 'tail',\n    };\n  },\n  getInitialState: function(): Object {\n    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {\n      isHighlighted: false,\n    });\n  },\n  mixins: [NativeMethodsMixin],\n  viewConfig: viewConfig,\n  getChildContext(): Object {\n    return {isInAParentText: true};\n  },\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  contextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n  /**\n   * Only assigned if touch is needed.\n   */\n  _handlers: (null: ?Object),\n  _hasPressHandler(): boolean {\n    return !!this.props.onPress || !!this.props.onLongPress;\n  },\n  /**\n   * These are assigned lazily the first time the responder is set to make plain\n   * text nodes as cheap as possible.\n   */\n  touchableHandleActivePressIn: (null: ?Function),\n  touchableHandleActivePressOut: (null: ?Function),\n  touchableHandlePress: (null: ?Function),\n  touchableHandleLongPress: (null: ?Function),\n  touchableGetPressRectOffset: (null: ?Function),\n  render(): React.Element<any> {\n    let newProps = this.props;\n    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {\n      if (!this._handlers) {\n        this._handlers = {\n          onStartShouldSetResponder: (): bool => {\n            const shouldSetFromProps = this.props.onStartShouldSetResponder &&\n                // $FlowFixMe(>=0.41.0)\n                this.props.onStartShouldSetResponder();\n            const setResponder = shouldSetFromProps || this._hasPressHandler();\n            if (setResponder && !this.touchableHandleActivePressIn) {\n              // Attach and bind all the other handlers only the first time a touch\n              // actually happens.\n              for (const key in Touchable.Mixin) {\n                if (typeof Touchable.Mixin[key] === 'function') {\n                  (this: any)[key] = Touchable.Mixin[key].bind(this);\n                }\n              }\n              this.touchableHandleActivePressIn = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: true,\n                });\n              };\n\n              this.touchableHandleActivePressOut = () => {\n                if (this.props.suppressHighlighting || !this._hasPressHandler()) {\n                  return;\n                }\n                this.setState({\n                  isHighlighted: false,\n                });\n              };\n\n              this.touchableHandlePress = (e: SyntheticEvent<>) => {\n                this.props.onPress && this.props.onPress(e);\n              };\n\n              this.touchableHandleLongPress = (e: SyntheticEvent<>) => {\n                this.props.onLongPress && this.props.onLongPress(e);\n              };\n\n              this.touchableGetPressRectOffset = function(): RectOffset {\n                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;\n              };\n            }\n            return setResponder;\n          },\n          onResponderGrant: function(e: SyntheticEvent<>, dispatchID: string) {\n            this.touchableHandleResponderGrant(e, dispatchID);\n            this.props.onResponderGrant &&\n              this.props.onResponderGrant.apply(this, arguments);\n          }.bind(this),\n          onResponderMove: function(e: SyntheticEvent<>) {\n            this.touchableHandleResponderMove(e);\n            this.props.onResponderMove &&\n              this.props.onResponderMove.apply(this, arguments);\n          }.bind(this),\n          onResponderRelease: function(e: SyntheticEvent<>) {\n            this.touchableHandleResponderRelease(e);\n            this.props.onResponderRelease &&\n              this.props.onResponderRelease.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminate: function(e: SyntheticEvent<>) {\n            this.touchableHandleResponderTerminate(e);\n            this.props.onResponderTerminate &&\n              this.props.onResponderTerminate.apply(this, arguments);\n          }.bind(this),\n          onResponderTerminationRequest: function(): bool {\n            // Allow touchable or props.onResponderTerminationRequest to deny\n            // the request\n            var allowTermination = this.touchableHandleResponderTerminationRequest();\n            if (allowTermination && this.props.onResponderTerminationRequest) {\n              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);\n            }\n            return allowTermination;\n          }.bind(this),\n        };\n      }\n      newProps = {\n        ...this.props,\n        ...this._handlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (newProps.selectionColor != null) {\n      newProps = {\n        ...newProps,\n        selectionColor: processColor(newProps.selectionColor)\n      };\n    }\n    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {\n      newProps = {\n        ...newProps,\n        style: [this.props.style, {color: 'magenta'}],\n      };\n    }\n    if (this.context.isInAParentText) {\n      return <RCTVirtualText {...newProps} />;\n    } else {\n      return <RCTText {...newProps} />;\n    }\n  },\n});\n\ntype RectOffset = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n}\n\nvar PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nvar RCTText = createReactNativeComponentClass(\n  viewConfig.uiViewClassName,\n  () => viewConfig\n);\nvar RCTVirtualText = RCTText;\n\nif (Platform.OS === 'android') {\n  RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', () => ({\n    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {\n      isHighlighted: true,\n    }),\n    uiViewClassName: 'RCTVirtualText',\n  }));\n}\n\nmodule.exports = Text;\n"]}