{"version":3,"sources":["_createRecurry.js"],"names":["isLaziable","require","setData","setWrapToString","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","createRecurry","func","bitmask","wrapFunc","placeholder","thisArg","partials","holders","argPos","ary","arity","isCurry","newHolders","undefined","newHoldersRight","newPartials","newPartialsRight","newData","result","apply","module","exports"],"mappings":"AAAA,GAAIA,YAAaC,QAAQ,eAAR,CAAjB,CACIC,QAAUD,QAAQ,YAAR,CADd,CAEIE,gBAAkBF,QAAQ,oBAAR,CAFtB,CAKA,GAAIG,gBAAiB,CAArB,CACIC,mBAAqB,CADzB,CAEIC,sBAAwB,CAF5B,CAGIC,gBAAkB,CAHtB,CAIIC,kBAAoB,EAJxB,CAKIC,wBAA0B,EAL9B,CAwBA,QAASC,cAAT,CAAuBC,IAAvB,CAA6BC,OAA7B,CAAsCC,QAAtC,CAAgDC,WAAhD,CAA6DC,OAA7D,CAAsEC,QAAtE,CAAgFC,OAAhF,CAAyFC,MAAzF,CAAiGC,GAAjG,CAAsGC,KAAtG,CAA6G,CAC3G,GAAIC,SAAUT,QAAUL,eAAxB,CACIe,WAAaD,QAAUJ,OAAV,CAAoBM,SADrC,CAEIC,gBAAkBH,QAAUE,SAAV,CAAsBN,OAF5C,CAGIQ,YAAcJ,QAAUL,QAAV,CAAqBO,SAHvC,CAIIG,iBAAmBL,QAAUE,SAAV,CAAsBP,QAJ7C,CAMAJ,SAAYS,QAAUb,iBAAV,CAA8BC,uBAA1C,CACAG,SAAW,EAAES,QAAUZ,uBAAV,CAAoCD,iBAAtC,CAAX,CAEA,GAAI,EAAEI,QAAUN,qBAAZ,CAAJ,CAAwC,CACtCM,SAAW,EAAER,eAAiBC,kBAAnB,CAAX,CACD,CACD,GAAIsB,SAAU,CACZhB,IADY,CACNC,OADM,CACGG,OADH,CACYU,WADZ,CACyBH,UADzB,CACqCI,gBADrC,CAEZF,eAFY,CAEKN,MAFL,CAEaC,GAFb,CAEkBC,KAFlB,CAAd,CAKA,GAAIQ,QAASf,SAASgB,KAAT,CAAeN,SAAf,CAA0BI,OAA1B,CAAb,CACA,GAAI3B,WAAWW,IAAX,CAAJ,CAAsB,CACpBT,QAAQ0B,MAAR,CAAgBD,OAAhB,EACD,CACDC,OAAOd,WAAP,CAAqBA,WAArB,CACA,MAAOX,iBAAgByB,MAAhB,CAAwBjB,IAAxB,CAA8BC,OAA9B,CAAP,CACD,CAEDkB,OAAOC,OAAP,CAAiBrB,aAAjB","file":"_createRecurry.js","sourcesContent":["var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n"]}